name: Release Validation

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  release-validation:
    name: Release Validation
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.3

      - name: Get Version
        id: get_version
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $version = "${{ github.event.inputs.version }}"
          } else {
            $version = "${{ github.ref_name }}"
          }
          echo "version=$version" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Run Release Validation
        run: python ci_cd_integration.py release --version ${{ steps.get_version.outputs.version }}

      - name: Check Validation Result
        run: |
          $result = Get-Content ci_artifacts/release_validation_${{ steps.get_version.outputs.version }}.json | ConvertFrom-Json
          if (-not $result.overall_success) {
            Write-Error "发布验证失败"
            exit 1
          }
        shell: pwsh

      - name: Build Release Binaries
        run: |
          # 构建Release配置
          msbuild PortMaster.sln /p:Configuration=Release /p:Platform=x86 /m

      - name: Create Release Package
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          $packageDir = "PortMaster-$version"

          New-Item -ItemType Directory -Path $packageDir

          # 复制可执行文件和依赖
          Copy-Item "bin/Release/PortMaster.exe" -Destination "$packageDir/"

          # 复制文档
          Copy-Item "README.md" -Destination "$packageDir/" -ErrorAction SilentlyContinue
          Copy-Item "AUTOMATION_README.md" -Destination "$packageDir/" -ErrorAction SilentlyContinue
          Copy-Item "CHANGELOG.md" -Destination "$packageDir/" -ErrorAction SilentlyContinue

          # 创建ZIP包
          Compress-Archive -Path "$packageDir/*" -DestinationPath "PortMaster-$version.zip"
        shell: pwsh

      - name: Generate Release Notes
        id: release_notes
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          $validationResult = Get-Content "ci_artifacts/release_validation_$version.json" | ConvertFrom-Json

          $notes = @"
## PortMaster $version

### 验证结果

"@

          foreach ($step in $validationResult.steps) {
            $status = if ($step.success) { "✅" } else { "❌" }
            $notes += "`n- $status $($step.name)"

            if ($step.details.total_tests) {
              $notes += " ($($step.details.passed_tests)/$($step.details.total_tests))"
            }
          }

          $notes += @"

### 测试覆盖

- 单元测试: $($validationResult.steps | Where-Object { $_.name -eq '单元测试' } | Select-Object -ExpandProperty details | Select-Object -ExpandProperty total_tests) 个
- 集成测试: $($validationResult.steps | Where-Object { $_.name -eq '集成测试' } | Select-Object -ExpandProperty details | Select-Object -ExpandProperty total_tests) 个
- 性能测试: 通过
- 回归测试: 无回归

### 下载

- Windows x86: PortMaster-$version.zip

### 安装说明

1. 下载并解压 PortMaster-$version.zip
2. 运行 PortMaster.exe
3. 查看 AUTOMATION_README.md 了解自动化功能

### 已知问题

无
"@

          $notes | Set-Content -Path "release_notes.md"
          echo "notes<<EOF" >> $env:GITHUB_OUTPUT
          echo "$notes" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: PortMaster ${{ steps.get_version.outputs.version }}
          body_path: release_notes.md
          files: |
            PortMaster-${{ steps.get_version.outputs.version }}.zip
            ci_artifacts/release_validation_${{ steps.get_version.outputs.version }}.json
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ steps.get_version.outputs.version }}
          path: |
            PortMaster-${{ steps.get_version.outputs.version }}.zip
            ci_artifacts/
            release_notes.md
          retention-days: 365

      - name: Create Release Baseline
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          python -c "from autotest_integration import AutoTestIntegration; at = AutoTestIntegration(); at.create_baseline('$version')"
        shell: pwsh

      - name: Commit Release Baseline
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add AutoTest/baselines/
          git commit -m "chore: 添加发布版本回归基线 ${{ steps.get_version.outputs.version }}" || echo "无变更"
          git push || echo "推送失败或无变更"
        shell: pwsh

  deploy-documentation:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: release-validation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Build Documentation
        run: |
          # 如果有文档生成工具，在这里运行
          # 例如: mkdocs build 或 sphinx-build

          # 目前我们只是复制Markdown文档
          mkdir -p docs
          cp README.md docs/
          cp AUTOMATION_README.md docs/
          cp Week*.md docs/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
          commit_message: 'docs: 更新文档 ${{ steps.get_version.outputs.version }}'

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: release-validation

    steps:
      - name: Send Release Notification
        uses: actions/github-script@v6
        with:
          script: |
            const version = '${{ steps.get_version.outputs.version }}';

            // 创建发布公告Issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚀 发布 ${version}`,
              body: `新版本 ${version} 已发布！\n\n[查看发布详情](${context.payload.repository.html_url}/releases/tag/${version})\n\n[下载链接](${context.payload.repository.html_url}/releases/download/${version}/PortMaster-${version}.zip)`,
              labels: ['release', 'announcement']
            });

            // 如果配置了Webhook，发送通知
            // await fetch('YOUR_WEBHOOK_URL', {
            //   method: 'POST',
            //   headers: { 'Content-Type': 'application/json' },
            //   body: JSON.stringify({ version, url: `${context.payload.repository.html_url}/releases/tag/${version}` })
            // });
