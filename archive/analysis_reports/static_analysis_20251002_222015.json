{
  "timestamp": "2025-10-02T22:20:15.144262",
  "project_root": ".",
  "source_files_analyzed": 59,
  "complexity_analysis": {
    "files": [
      {
        "file": "Common/RingBuffer.h",
        "lines_of_code": 266,
        "function_count": 18,
        "functions": [
          {
            "name": "Write",
            "return_type": "bool",
            "parameters": "const T* data, size_t count",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Read",
            "return_type": "size_t",
            "parameters": "T* data, size_t maxCount",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "WriteWait",
            "return_type": "bool",
            "parameters": "const T* data, size_t count, std::chrono::milliseconds timeout = (std::chrono::milliseconds::max)()",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ReadWait",
            "return_type": "size_t",
            "parameters": "T* data, size_t maxCount, std::chrono::milliseconds timeout = (std::chrono::milliseconds::max)()",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Peek",
            "return_type": "size_t",
            "parameters": "T* data, size_t maxCount",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Clear",
            "return_type": "void",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetSize",
            "return_type": "size_t",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetSizeLocked",
            "return_type": "return",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetCapacity",
            "return_type": "size_t",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetAvailableSpace",
            "return_type": "size_t",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetFreeSpaceLocked",
            "return_type": "return",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsEmpty",
            "return_type": "bool",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsFull",
            "return_type": "bool",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 2
          },
          {
            "name": "Resize",
            "return_type": "void",
            "parameters": "size_t newCapacity",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetSizeLocked",
            "return_type": "size_t",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetFreeSpaceLocked",
            "return_type": "size_t",
            "parameters": "",
            "lines": 19,
            "cyclomatic_complexity": 2
          },
          {
            "name": "WriteDataLocked",
            "return_type": "void",
            "parameters": "const T* data, size_t count",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ReadDataLocked",
            "return_type": "void",
            "parameters": "T* data, size_t count",
            "lines": 4,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 20,
          "average_cyclomatic_complexity": 1.1111111111111112,
          "max_cyclomatic_complexity": 2,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "AutoTest/IntegrationTests.h",
        "lines_of_code": 416,
        "function_count": 17,
        "functions": [
          {
            "name": "SetUp",
            "return_type": "void",
            "parameters": "",
            "lines": 13,
            "cyclomatic_complexity": 4
          },
          {
            "name": "TearDown",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestStackInitialization",
            "return_type": "void",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestMultiLayerConnection",
            "return_type": "void",
            "parameters": "",
            "lines": 47,
            "cyclomatic_complexity": 3
          },
          {
            "name": "TestEndToEndDataFlow",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestFragmentedDataTransfer",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestLargeDataTransfer",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestMultiLayerStatistics",
            "return_type": "void",
            "parameters": "",
            "lines": 37,
            "cyclomatic_complexity": 2
          },
          {
            "name": "TestConfigurationPropagation",
            "return_type": "void",
            "parameters": "",
            "lines": 314,
            "cyclomatic_complexity": 8
          },
          {
            "name": "SetUp",
            "return_type": "void",
            "parameters": "",
            "lines": 31,
            "cyclomatic_complexity": 6
          },
          {
            "name": "TearDown",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestSmallFileTransfer",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestMediumFileTransfer",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestLargeFileTransfer",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestFileIntegrity",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestProgressCallback",
            "return_type": "void",
            "parameters": "",
            "lines": 7,
            "cyclomatic_complexity": 1
          },
          {
            "name": "CreateTestFile",
            "return_type": "void",
            "parameters": "const std::string& filename, size_t size",
            "lines": 4,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 35,
          "average_cyclomatic_complexity": 2.0588235294117645,
          "max_cyclomatic_complexity": 8,
          "high_complexity_functions": []
        },
        "issues": [
          {
            "severity": "medium",
            "type": "long_function",
            "function": "TestConfigurationPropagation",
            "lines": 314,
            "message": "函数TestConfigurationPropagation行数过多: 314行",
            "suggestion": "考虑拆分为多个小函数"
          }
        ]
      },
      {
        "file": "src/TransmissionTask.h",
        "lines_of_code": 133,
        "function_count": 28,
        "functions": [
          {
            "name": "Start",
            "return_type": "bool",
            "parameters": "const std::vector<uint8_t>& data",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Pause",
            "return_type": "void",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Resume",
            "return_type": "void",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Cancel",
            "return_type": "void",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Stop",
            "return_type": "void",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetState",
            "return_type": "TransmissionTaskState",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetProgress",
            "return_type": "TransmissionProgress",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsRunning",
            "return_type": "bool",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsPaused",
            "return_type": "bool",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsCompleted",
            "return_type": "bool",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsCancelled",
            "return_type": "bool",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetProgressCallback",
            "return_type": "void",
            "parameters": "ProgressCallback callback",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetCompletionCallback",
            "return_type": "void",
            "parameters": "CompletionCallback callback",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetLogCallback",
            "return_type": "void",
            "parameters": "LogCallback callback",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetChunkSize",
            "return_type": "void",
            "parameters": "size_t chunkSize",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetRetrySettings",
            "return_type": "void",
            "parameters": "int maxRetries, int retryDelayMs",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetProgressUpdateInterval",
            "return_type": "void",
            "parameters": "int intervalMs",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "UpdateProgress",
            "return_type": "void",
            "parameters": "size_t transmitted, size_t total, const std::string& status",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "WriteLog",
            "return_type": "void",
            "parameters": "const std::string& message",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ExecuteTransmission",
            "return_type": "void",
            "parameters": "",
            "lines": 20,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ReportCompletion",
            "return_type": "void",
            "parameters": "TransmissionTaskState finalState, TransportError errorCode, const std::string& errorMsg = \"\"",
            "lines": 20,
            "cyclomatic_complexity": 1
          },
          {
            "name": "CheckPauseAndCancel",
            "return_type": "bool",
            "parameters": "",
            "lines": 20,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ReliableTransmissionTask",
            "return_type": "explicit",
            "parameters": "std::shared_ptr<ReliableChannel> reliableChannel",
            "lines": 13,
            "cyclomatic_complexity": 1
          },
          {
            "name": "DoSendChunk",
            "return_type": "TransportError",
            "parameters": "const uint8_t* data, size_t size",
            "lines": 13,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsTransportReady",
            "return_type": "bool",
            "parameters": "",
            "lines": 13,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ExecuteFileTransmission",
            "return_type": "bool",
            "parameters": "",
            "lines": 13,
            "cyclomatic_complexity": 1
          },
          {
            "name": "CreateTempFileFromData",
            "return_type": "bool",
            "parameters": "const std::vector<uint8_t>& data, std::string& tempFilePath",
            "lines": 13,
            "cyclomatic_complexity": 1
          },
          {
            "name": "CleanupTempFile",
            "return_type": "void",
            "parameters": "",
            "lines": 13,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 28,
          "average_cyclomatic_complexity": 1.0,
          "max_cyclomatic_complexity": 1,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "Transport/LoopbackTransport.cpp",
        "lines_of_code": 550,
        "function_count": 2,
        "functions": [
          {
            "name": "packet",
            "return_type": "LoopbackPacket",
            "parameters": "dataVec, sequenceId",
            "lines": 12,
            "cyclomatic_complexity": 2
          },
          {
            "name": "Write",
            "return_type": "return",
            "parameters": "data, size, nullptr",
            "lines": 10,
            "cyclomatic_complexity": 2
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 4,
          "average_cyclomatic_complexity": 2.0,
          "max_cyclomatic_complexity": 2,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "src/TransmissionStateManager.h",
        "lines_of_code": 65,
        "function_count": 16,
        "functions": [
          {
            "name": "IsValidStateTransition",
            "return_type": "bool",
            "parameters": "TransmissionUIState from, TransmissionUIState to",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "LogStateChange",
            "return_type": "void",
            "parameters": "TransmissionUIState oldState, TransmissionUIState newState, const std::string& reason",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "SetStateChangeCallback",
            "return_type": "void",
            "parameters": "StateChangeCallback callback",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetCurrentState",
            "return_type": "TransmissionUIState",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "RequestStateTransition",
            "return_type": "bool",
            "parameters": "TransmissionUIState newState, const std::string& reason = \"\"",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ForceState",
            "return_type": "void",
            "parameters": "TransmissionUIState newState, const std::string& reason = \"\"",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "IsTransmitting",
            "return_type": "bool",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "IsErrorState",
            "return_type": "bool",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "CanStartNewTransmission",
            "return_type": "bool",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "CanPauseTransmission",
            "return_type": "bool",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "CanResumeTransmission",
            "return_type": "bool",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "CanCancelTransmission",
            "return_type": "bool",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetStateChangeCount",
            "return_type": "uint64_t",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "Reset",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ClearCallbacks",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "DumpStateHistory",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 32,
          "average_cyclomatic_complexity": 2.0,
          "max_cyclomatic_complexity": 2,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "TestReliable/test_main.cpp",
        "lines_of_code": 243,
        "function_count": 10,
        "functions": [
          {
            "name": "OnError",
            "return_type": "void",
            "parameters": "const string& msg",
            "lines": 8,
            "cyclomatic_complexity": 4
          },
          {
            "name": "OnSendProgress",
            "return_type": "void",
            "parameters": "uint64_t current, uint64_t total, const string& filename",
            "lines": 4,
            "cyclomatic_complexity": 2
          },
          {
            "name": "OnRecvProgress",
            "return_type": "void",
            "parameters": "uint64_t current, uint64_t total, const string& filename",
            "lines": 4,
            "cyclomatic_complexity": 2
          },
          {
            "name": "OnStateChanged",
            "return_type": "void",
            "parameters": "ReliableState state",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "state == ReliableState::RELIABLE_FAILED",
            "lines": 19,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ReadFile",
            "return_type": "bool",
            "parameters": "const string& path, vector<uint8_t>& data",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "file",
            "return_type": "ifstream",
            "parameters": "path, ios::binary",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "WriteFile",
            "return_type": "bool",
            "parameters": "const string& path, const vector<uint8_t>& data",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "file",
            "return_type": "ofstream",
            "parameters": "path, ios::binary",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "main",
            "return_type": "int",
            "parameters": "int argc, char* argv[]",
            "lines": 4,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 16,
          "average_cyclomatic_complexity": 1.6,
          "max_cyclomatic_complexity": 4,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "src/PortMasterDlg.cpp",
        "lines_of_code": 3924,
        "function_count": 48,
        "functions": [
          {
            "name": "DoDataExchange",
            "return_type": "void",
            "parameters": "CDataExchange *pDX",
            "lines": 2,
            "cyclomatic_complexity": 1
          },
          {
            "name": "dc",
            "return_type": "CPaintDC",
            "parameters": "this",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "nIDEvent == TIMER_ID_THROTTLED_DISPLAY",
            "lines": 6,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "m_transport",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "m_transmissionPaused",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "m_transport && m_transport->IsOpen()",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "statusTextW",
            "return_type": "CA2W",
            "parameters": "progress.statusText.c_str(), CP_UTF8",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "portName",
            "return_type": "CA2T",
            "parameters": "port.c_str(), CP_UTF8",
            "lines": 6,
            "cyclomatic_complexity": 1
          },
          {
            "name": "portName",
            "return_type": "CA2T",
            "parameters": "port.c_str(), CP_UTF8",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "portName",
            "return_type": "CA2T",
            "parameters": "port.c_str(), CP_UTF8",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "m_sendCacheValid",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "utf8Str",
            "return_type": "CT2A",
            "parameters": "str, CP_UTF8",
            "lines": 35,
            "cyclomatic_complexity": 5
          },
          {
            "name": "utf8Result",
            "return_type": "CA2T",
            "parameters": "reinterpret_cast<const char *>(bytes.data()), CP_UTF8",
            "lines": 36,
            "cyclomatic_complexity": 6
          },
          {
            "name": "CString",
            "return_type": "return",
            "parameters": "utf8Result",
            "lines": 36,
            "cyclomatic_complexity": 6
          },
          {
            "name": "CString",
            "return_type": "return",
            "parameters": "",
            "lines": 36,
            "cyclomatic_complexity": 6
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "byte < 32 && byte != '\\r' && byte != '\\n' && byte != '\\t'",
            "lines": 6,
            "cyclomatic_complexity": 3
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "byte == '\\r'",
            "lines": 6,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "byte == '\\n'",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "byte == '\\t'",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "utf8Text",
            "return_type": "CA2T",
            "parameters": "safeData.data(), CP_UTF8",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "gbkText",
            "return_type": "CA2T",
            "parameters": "safeData.data(), CP_ACP",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "byte < 32 && byte != '\\r' && byte != '\\n' && byte != '\\t'",
            "lines": 6,
            "cyclomatic_complexity": 3
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "byte == '\\r'",
            "lines": 6,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "byte == '\\n'",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "byte == '\\t'",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "utf8Text",
            "return_type": "CA2T",
            "parameters": "safeData.data(), CP_UTF8",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "gbkText",
            "return_type": "CA2T",
            "parameters": "safeData.data(), CP_ACP",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "utf8Text",
            "return_type": "CA2T",
            "parameters": "safeData.data(), CP_UTF8",
            "lines": 18,
            "cyclomatic_complexity": 5
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "byte == 0",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "userChoice == IDCANCEL",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "!saveData.IsEmpty()",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "utf8Data",
            "return_type": "CT2A",
            "parameters": "data, CP_UTF8",
            "lines": 7,
            "cyclomatic_complexity": 1
          },
          {
            "name": "addressA",
            "return_type": "CStringA",
            "parameters": "address",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "m_transport && m_transport->IsOpen()",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "!hasReceivedData",
            "lines": 13,
            "cyclomatic_complexity": 3
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "!isReliableMode",
            "lines": 6,
            "cyclomatic_complexity": 1
          },
          {
            "name": "errorMsgT",
            "return_type": "CA2T",
            "parameters": "error.c_str(), CP_UTF8",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "converter",
            "return_type": "CT2CA",
            "parameters": "*statusText, CP_UTF8",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "error != TransportError::Success",
            "lines": 22,
            "cyclomatic_complexity": 5
          },
          {
            "name": "portName",
            "return_type": "CA2T",
            "parameters": "serialConfig.portName.c_str(), CP_UTF8",
            "lines": 14,
            "cyclomatic_complexity": 4
          },
          {
            "name": "ReadDataFromTempCache",
            "return_type": "return",
            "parameters": "0, 0",
            "lines": 165,
            "cyclomatic_complexity": 23
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "file.fail()",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ReadDataFromTempCacheUnlocked",
            "return_type": "return",
            "parameters": "0, 0",
            "lines": 29,
            "cyclomatic_complexity": 4
          },
          {
            "name": "InitializeTempCacheFile",
            "return_type": "return",
            "parameters": "",
            "lines": 27,
            "cyclomatic_complexity": 3
          },
          {
            "name": "InitializeTempCacheFile",
            "return_type": "return",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "InitializeTempCacheFile",
            "return_type": "return",
            "parameters": "",
            "lines": 44,
            "cyclomatic_complexity": 10
          },
          {
            "name": "fileName",
            "return_type": "CString",
            "parameters": "filePath",
            "lines": 9,
            "cyclomatic_complexity": 1
          },
          {
            "name": "statusText",
            "return_type": "CT2CA",
            "parameters": "currentStatus",
            "lines": 5,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 120,
          "average_cyclomatic_complexity": 2.5,
          "max_cyclomatic_complexity": 23,
          "high_complexity_functions": []
        },
        "issues": [
          {
            "severity": "medium",
            "type": "long_function",
            "function": "ReadDataFromTempCache",
            "lines": 165,
            "message": "函数ReadDataFromTempCache行数过多: 165行",
            "suggestion": "考虑拆分为多个小函数"
          }
        ]
      },
      {
        "file": "Common/ConfigStore.cpp",
        "lines_of_code": 993,
        "function_count": 8,
        "functions": [
          {
            "name": "SaveConfigToFile",
            "return_type": "return",
            "parameters": "filePath",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SaveConfigToFile",
            "return_type": "return",
            "parameters": "filePath",
            "lines": 26,
            "cyclomatic_complexity": 4
          },
          {
            "name": "DeserializeFromJson",
            "return_type": "return",
            "parameters": "content",
            "lines": 23,
            "cyclomatic_complexity": 3
          },
          {
            "name": "LoadConfigFromFile",
            "return_type": "return",
            "parameters": "m_backupFilePath",
            "lines": 117,
            "cyclomatic_complexity": 3
          },
          {
            "name": "UnescapeJsonString",
            "return_type": "return",
            "parameters": "json.substr(valueStart, valueEnd - valueStart)",
            "lines": 3,
            "cyclomatic_complexity": 4
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "json[braceEnd] == '}'",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "type == \"并口\"",
            "lines": 22,
            "cyclomatic_complexity": 5
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "!isdigit(c)",
            "lines": 3,
            "cyclomatic_complexity": 2
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 23,
          "average_cyclomatic_complexity": 2.875,
          "max_cyclomatic_complexity": 5,
          "high_complexity_functions": []
        },
        "issues": [
          {
            "severity": "medium",
            "type": "long_function",
            "function": "LoadConfigFromFile",
            "lines": 117,
            "message": "函数LoadConfigFromFile行数过多: 117行",
            "suggestion": "考虑拆分为多个小函数"
          }
        ]
      },
      {
        "file": "src/TransmissionTask.cpp",
        "lines_of_code": 458,
        "function_count": 3,
        "functions": [
          {
            "name": "TransmissionProgress",
            "return_type": "return",
            "parameters": "transmitted, m_totalBytes, status",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "totalSent == dataSize",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "progress",
            "return_type": "TransmissionProgress",
            "parameters": "transmitted, total, status",
            "lines": 17,
            "cyclomatic_complexity": 2
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 4,
          "average_cyclomatic_complexity": 1.3333333333333333,
          "max_cyclomatic_complexity": 2,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "src/ButtonStateManager.h",
        "lines_of_code": 75,
        "function_count": 22,
        "functions": [
          {
            "name": "IsValidButtonID",
            "return_type": "bool",
            "parameters": "ButtonID buttonId",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "NotifyStateChange",
            "return_type": "void",
            "parameters": "ButtonID buttonId, ButtonState newState, const std::string& reason",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "SetStateChangeCallback",
            "return_type": "void",
            "parameters": "ButtonStateChangeCallback callback",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "SetButtonState",
            "return_type": "bool",
            "parameters": "ButtonID buttonId, ButtonState newState, const std::string& reason = \"\"",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetButtonState",
            "return_type": "ButtonState",
            "parameters": "ButtonID buttonId",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "SetButtonStates",
            "return_type": "void",
            "parameters": "const std::unordered_map<ButtonID, ButtonState>& states, const std::string& reason = \"\"",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "IsButtonEnabled",
            "return_type": "bool",
            "parameters": "ButtonID buttonId",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "IsButtonVisible",
            "return_type": "bool",
            "parameters": "ButtonID buttonId",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ApplyIdleState",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ApplyConnectingState",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ApplyConnectedState",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ApplyTransmittingState",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ApplyPausedState",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ApplyCompletedState",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ApplyErrorState",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ApplyReliableModeIdleState",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ApplyReliableModeTransmittingState",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ApplyReliableModePausedState",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ApplyReliableModeCompletedState",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "DumpButtonStates",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ResetToDefault",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ClearCallbacks",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 44,
          "average_cyclomatic_complexity": 2.0,
          "max_cyclomatic_complexity": 2,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "AutoTest/ErrorRecoveryTests.h",
        "lines_of_code": 182,
        "function_count": 9,
        "functions": [
          {
            "name": "SetUp",
            "return_type": "void",
            "parameters": "",
            "lines": 9,
            "cyclomatic_complexity": 3
          },
          {
            "name": "TearDown",
            "return_type": "void",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestPacketLoss",
            "return_type": "void",
            "parameters": "double lossRate",
            "lines": 97,
            "cyclomatic_complexity": 4
          },
          {
            "name": "SetUp",
            "return_type": "void",
            "parameters": "",
            "lines": 9,
            "cyclomatic_complexity": 3
          },
          {
            "name": "TearDown",
            "return_type": "void",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestTimeout",
            "return_type": "void",
            "parameters": "int timeout_ms, int delay_ms",
            "lines": 25,
            "cyclomatic_complexity": 2
          },
          {
            "name": "TestDynamicTimeout",
            "return_type": "void",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetUp",
            "return_type": "void",
            "parameters": "",
            "lines": 9,
            "cyclomatic_complexity": 3
          },
          {
            "name": "TearDown",
            "return_type": "void",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 19,
          "average_cyclomatic_complexity": 2.111111111111111,
          "max_cyclomatic_complexity": 4,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "src/PortMaster.h",
        "lines_of_code": 15,
        "function_count": 0,
        "functions": [],
        "complexity": {
          "total_cyclomatic_complexity": 0,
          "average_cyclomatic_complexity": 0,
          "max_cyclomatic_complexity": 0,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "Transport/ParallelTransport.h",
        "lines_of_code": 129,
        "function_count": 38,
        "functions": [
          {
            "name": "Open",
            "return_type": "TransportError",
            "parameters": "const TransportConfig& config",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Close",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Write",
            "return_type": "TransportError",
            "parameters": "const void* data, size_t size, size_t* written = nullptr",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Read",
            "return_type": "TransportError",
            "parameters": "void* buffer, size_t size, size_t* read, DWORD timeout = INFINITE",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "WriteAsync",
            "return_type": "TransportError",
            "parameters": "const void* data, size_t size",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "StartAsyncRead",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "StopAsyncRead",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetState",
            "return_type": "TransportState",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsOpen",
            "return_type": "bool",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetStats",
            "return_type": "TransportStats",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ResetStats",
            "return_type": "void",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetDataReceivedCallback",
            "return_type": "void",
            "parameters": "DataReceivedCallback callback",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetStateChangedCallback",
            "return_type": "void",
            "parameters": "StateChangedCallback callback",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetErrorOccurredCallback",
            "return_type": "void",
            "parameters": "ErrorOccurredCallback callback",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "FlushBuffers",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetAvailableBytes",
            "return_type": "size_t",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetPortStatus",
            "return_type": "ParallelPortStatus",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsPortBusy",
            "return_type": "bool",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsPortReady",
            "return_type": "bool",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsPortOnline",
            "return_type": "bool",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ResetPort",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ConfigurePort",
            "return_type": "TransportError",
            "parameters": "const ParallelPortConfig& config",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsParallelPortAvailable",
            "return_type": "bool",
            "parameters": "const std::string& portName",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetState",
            "return_type": "void",
            "parameters": "TransportState newState",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "NotifyError",
            "return_type": "void",
            "parameters": "TransportError error, const std::string& message",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "UpdateStats",
            "return_type": "void",
            "parameters": "uint64_t bytesSent, uint64_t bytesReceived",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "OpenPortHandle",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ClosePortHandle",
            "return_type": "void",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "WriteToPort",
            "return_type": "TransportError",
            "parameters": "const void* data, size_t size, size_t* written",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ReadFromPort",
            "return_type": "TransportError",
            "parameters": "void* buffer, size_t size, size_t* read, DWORD timeout",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "QueryPortStatus",
            "return_type": "ParallelPortStatus",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "StatusMonitorThread",
            "return_type": "void",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "AsyncReadThread",
            "return_type": "void",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "AsyncWriteThread",
            "return_type": "void",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetLastError",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ValidateConfig",
            "return_type": "bool",
            "parameters": "const ParallelPortConfig& config",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetPortTimeouts",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          },
          {
            "name": "QueryPortInfo",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 12,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 38,
          "average_cyclomatic_complexity": 1.0,
          "max_cyclomatic_complexity": 1,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "src/ButtonStateManager.cpp",
        "lines_of_code": 329,
        "function_count": 0,
        "functions": [],
        "complexity": {
          "total_cyclomatic_complexity": 0,
          "average_cyclomatic_complexity": 0,
          "max_cyclomatic_complexity": 0,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "Protocol/ReliableChannel.cpp",
        "lines_of_code": 1954,
        "function_count": 12,
        "functions": [
          {
            "name": "Send",
            "return_type": "return",
            "parameters": "buffer",
            "lines": 40,
            "cyclomatic_complexity": 12
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "sendError == TransportError::Busy",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "!transferActive && queueEmpty",
            "lines": 37,
            "cyclomatic_complexity": 6
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "error != TransportError::Success",
            "lines": 63,
            "cyclomatic_complexity": 8
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "sendError == TransportError::Busy",
            "lines": 4,
            "cyclomatic_complexity": 2
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "slotWasInUse",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "completionRate < 0.1",
            "lines": 13,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "error == TransportError::Busy",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "error == TransportError::Busy",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "sendError == TransportError::Busy",
            "lines": 7,
            "cyclomatic_complexity": 2
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "sendError == TransportError::Busy",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "error == TransportError::Busy",
            "lines": 4,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 39,
          "average_cyclomatic_complexity": 3.25,
          "max_cyclomatic_complexity": 12,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "AutoTest/TransportUnitTests.h",
        "lines_of_code": 394,
        "function_count": 22,
        "functions": [
          {
            "name": "TransportTestBase",
            "return_type": "explicit",
            "parameters": "const std::string& name) : TestSuite(name",
            "lines": 12,
            "cyclomatic_complexity": 3
          },
          {
            "name": "WaitForState",
            "return_type": "bool",
            "parameters": "ITransport* transport, TransportState expectedState, DWORD timeoutMs = 5000",
            "lines": 7,
            "cyclomatic_complexity": 2
          },
          {
            "name": "VerifyStats",
            "return_type": "void",
            "parameters": "const TransportStats& stats, uint64_t minBytesSent, uint64_t minBytesReceived",
            "lines": 8,
            "cyclomatic_complexity": 2
          },
          {
            "name": "SetUp",
            "return_type": "void",
            "parameters": "",
            "lines": 7,
            "cyclomatic_complexity": 3
          },
          {
            "name": "TearDown",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestOpenClose",
            "return_type": "void",
            "parameters": "",
            "lines": 28,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestSyncWriteRead",
            "return_type": "void",
            "parameters": "",
            "lines": 59,
            "cyclomatic_complexity": 7
          },
          {
            "name": "TestLargeDataTransfer",
            "return_type": "void",
            "parameters": "",
            "lines": 9,
            "cyclomatic_complexity": 2
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "error == TransportError::Timeout",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestAsyncWriteRead",
            "return_type": "void",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestStatistics",
            "return_type": "void",
            "parameters": "",
            "lines": 21,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestStatsReset",
            "return_type": "void",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestFlushBuffers",
            "return_type": "void",
            "parameters": "",
            "lines": 22,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestAvailableBytes",
            "return_type": "void",
            "parameters": "",
            "lines": 25,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestErrorInjection",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestPacketLoss",
            "return_type": "void",
            "parameters": "",
            "lines": 16,
            "cyclomatic_complexity": 3
          },
          {
            "name": "TestConfigUpdate",
            "return_type": "void",
            "parameters": "",
            "lines": 104,
            "cyclomatic_complexity": 4
          },
          {
            "name": "SetUp",
            "return_type": "void",
            "parameters": "",
            "lines": 7,
            "cyclomatic_complexity": 3
          },
          {
            "name": "TearDown",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestEnumeratePorts",
            "return_type": "void",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestInitialState",
            "return_type": "void",
            "parameters": "",
            "lines": 16,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestInvalidOperations",
            "return_type": "void",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 42,
          "average_cyclomatic_complexity": 1.9090909090909092,
          "max_cyclomatic_complexity": 7,
          "high_complexity_functions": []
        },
        "issues": [
          {
            "severity": "medium",
            "type": "long_function",
            "function": "TestConfigUpdate",
            "lines": 104,
            "message": "函数TestConfigUpdate行数过多: 104行",
            "suggestion": "考虑拆分为多个小函数"
          }
        ]
      },
      {
        "file": "Common/ConfigStore.h",
        "lines_of_code": 166,
        "function_count": 0,
        "functions": [],
        "complexity": {
          "total_cyclomatic_complexity": 0,
          "average_cyclomatic_complexity": 0,
          "max_cyclomatic_complexity": 0,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "Transport/SerialTransport.h",
        "lines_of_code": 76,
        "function_count": 0,
        "functions": [],
        "complexity": {
          "total_cyclomatic_complexity": 0,
          "average_cyclomatic_complexity": 0,
          "max_cyclomatic_complexity": 0,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "Transport/SerialTransport.cpp",
        "lines_of_code": 452,
        "function_count": 3,
        "functions": [
          {
            "name": "if",
            "return_type": "else",
            "parameters": "waitResult == WAIT_TIMEOUT",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Write",
            "return_type": "return",
            "parameters": "data, size, &written",
            "lines": 16,
            "cyclomatic_complexity": 3
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "error != TransportError::Timeout",
            "lines": 37,
            "cyclomatic_complexity": 11
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 15,
          "average_cyclomatic_complexity": 5.0,
          "max_cyclomatic_complexity": 11,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "src/PortMaster.cpp",
        "lines_of_code": 54,
        "function_count": 2,
        "functions": [
          {
            "name": "if",
            "return_type": "else",
            "parameters": "nResponse == IDCANCEL",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "nResponse == -1",
            "lines": 3,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 2,
          "average_cyclomatic_complexity": 1.0,
          "max_cyclomatic_complexity": 1,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "AutoTest/main.cpp",
        "lines_of_code": 196,
        "function_count": 19,
        "functions": [
          {
            "name": "PrintUsage",
            "return_type": "void",
            "parameters": "",
            "lines": 195,
            "cyclomatic_complexity": 44
          },
          {
            "name": "main",
            "return_type": "int",
            "parameters": "int argc, char* argv[]",
            "lines": 52,
            "cyclomatic_complexity": 20
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "arg == \"--all\"",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "arg == \"--unit-tests\"",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "arg == \"--integration\"",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "arg == \"--error-recovery\"",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "arg == \"--performance\"",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "arg == \"--stress\"",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "arg == \"--report\" && i + 1 < argc",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "arg == \"--create-baseline\" && i + 1 < argc",
            "lines": 7,
            "cyclomatic_complexity": 3
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "arg == \"--regression\" && i + 1 < argc",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "arg == \"--auto-regression\" && i + 1 < argc",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "arg == \"--list-baselines\"",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "regressionMode == \"create-baseline\"",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "autoRunner",
            "return_type": "AutomatedRegressionRunner",
            "parameters": "runner, regressionManager",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "regressionMode == \"regression\"",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "autoRunner",
            "return_type": "AutomatedRegressionRunner",
            "parameters": "runner, regressionManager",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "regressionMode == \"auto-regression\"",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "autoRunner",
            "return_type": "AutomatedRegressionRunner",
            "parameters": "runner, regressionManager",
            "lines": 4,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 83,
          "average_cyclomatic_complexity": 4.368421052631579,
          "max_cyclomatic_complexity": 44,
          "high_complexity_functions": [
            "PrintUsage"
          ]
        },
        "issues": [
          {
            "severity": "critical",
            "type": "very_high_complexity",
            "function": "PrintUsage",
            "complexity": 44,
            "message": "函数PrintUsage圈复杂度过高: 44 (建议<30)",
            "suggestion": "考虑拆分函数或简化逻辑"
          },
          {
            "severity": "medium",
            "type": "long_function",
            "function": "PrintUsage",
            "lines": 195,
            "message": "函数PrintUsage行数过多: 195行",
            "suggestion": "考虑拆分为多个小函数"
          }
        ]
      },
      {
        "file": "AutoTest/StressTests.h",
        "lines_of_code": 291,
        "function_count": 12,
        "functions": [
          {
            "name": "SetUp",
            "return_type": "void",
            "parameters": "",
            "lines": 9,
            "cyclomatic_complexity": 3
          },
          {
            "name": "TearDown",
            "return_type": "void",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestLargeDataStress",
            "return_type": "void",
            "parameters": "size_t dataSize",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestContinuousTransmission",
            "return_type": "void",
            "parameters": "int iterations, size_t blockSize",
            "lines": 29,
            "cyclomatic_complexity": 6
          },
          {
            "name": "TestHighErrorRateStress",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetUp",
            "return_type": "void",
            "parameters": "",
            "lines": 9,
            "cyclomatic_complexity": 3
          },
          {
            "name": "TearDown",
            "return_type": "void",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestLongRunningStability",
            "return_type": "void",
            "parameters": "int durationSeconds",
            "lines": 37,
            "cyclomatic_complexity": 6
          },
          {
            "name": "TestMemoryLeak",
            "return_type": "void",
            "parameters": "",
            "lines": 23,
            "cyclomatic_complexity": 4
          },
          {
            "name": "SetUp",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TearDown",
            "return_type": "void",
            "parameters": "",
            "lines": 20,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestConcurrentChannels",
            "return_type": "void",
            "parameters": "int channelCount",
            "lines": 43,
            "cyclomatic_complexity": 5
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 33,
          "average_cyclomatic_complexity": 2.75,
          "max_cyclomatic_complexity": 6,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "src/UIStateManager.cpp",
        "lines_of_code": 159,
        "function_count": 2,
        "functions": [
          {
            "name": "GetCurrentStatus_Unlocked",
            "return_type": "return",
            "parameters": "",
            "lines": 23,
            "cyclomatic_complexity": 5
          },
          {
            "name": "converter",
            "return_type": "CA2T",
            "parameters": "currentStatus.text.c_str(), CP_UTF8",
            "lines": 3,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 6,
          "average_cyclomatic_complexity": 3.0,
          "max_cyclomatic_complexity": 5,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "include/framework.h",
        "lines_of_code": 34,
        "function_count": 0,
        "functions": [],
        "complexity": {
          "total_cyclomatic_complexity": 0,
          "average_cyclomatic_complexity": 0,
          "max_cyclomatic_complexity": 0,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "AutoTest/ui_test_main.cpp",
        "lines_of_code": 69,
        "function_count": 5,
        "functions": [
          {
            "name": "RunBasicTest",
            "return_type": "bool",
            "parameters": "",
            "lines": 19,
            "cyclomatic_complexity": 2
          },
          {
            "name": "TestStatusBarUpdate",
            "return_type": "void",
            "parameters": "",
            "lines": 7,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestButtonStates",
            "return_type": "void",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestTransmissionStates",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "main",
            "return_type": "int",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 6,
          "average_cyclomatic_complexity": 1.2,
          "max_cyclomatic_complexity": 2,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "src/ThreadSafeProgressManager.h",
        "lines_of_code": 105,
        "function_count": 29,
        "functions": [
          {
            "name": "TriggerCallback",
            "return_type": "void",
            "parameters": "const ProgressInfo& progress",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ShouldUpdate",
            "return_type": "bool",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "AddToHistory",
            "return_type": "void",
            "parameters": "const ProgressInfo& progress",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "SetProgress",
            "return_type": "void",
            "parameters": "uint64_t current, uint64_t total, const std::string& statusText = \"\"",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "SetCurrentProgress",
            "return_type": "void",
            "parameters": "uint64_t current",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "SetTotalProgress",
            "return_type": "void",
            "parameters": "uint64_t total",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "SetPercentageProgress",
            "return_type": "void",
            "parameters": "int percentage",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "SetStatusText",
            "return_type": "void",
            "parameters": "const std::string& statusText",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetCurrentProgress",
            "return_type": "uint64_t",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetTotalProgress",
            "return_type": "uint64_t",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetPercentageProgress",
            "return_type": "int",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetProgressInfo",
            "return_type": "ProgressInfo",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "IncrementProgress",
            "return_type": "void",
            "parameters": "uint64_t increment = 1, const std::string& statusText = \"\"",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ResetProgress",
            "return_type": "void",
            "parameters": "const std::string& statusText = \"\"",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "SetComplete",
            "return_type": "void",
            "parameters": "const std::string& completionText = \"完成\"",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "SetProgressCallback",
            "return_type": "void",
            "parameters": "ProgressChangeCallback callback",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ClearProgressCallback",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "SetMinUpdateInterval",
            "return_type": "void",
            "parameters": "std::chrono::milliseconds interval",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "IsComplete",
            "return_type": "bool",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "IsInProgress",
            "return_type": "bool",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "IsValidProgress",
            "return_type": "bool",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetUpdateCount",
            "return_type": "uint64_t",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetCallbackCount",
            "return_type": "uint64_t",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetProgressRate",
            "return_type": "double",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ClearProgressHistory",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "DumpProgressInfo",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "DumpStatistics",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "UpdateProgressWithPercentage",
            "return_type": "void",
            "parameters": "int percentage, const std::string& statusText = \"\"",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "UpdateProgressWithRatio",
            "return_type": "void",
            "parameters": "double ratio, const std::string& statusText = \"\"",
            "lines": 5,
            "cyclomatic_complexity": 2
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 58,
          "average_cyclomatic_complexity": 2.0,
          "max_cyclomatic_complexity": 2,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "src/UIStateManager.h",
        "lines_of_code": 79,
        "function_count": 12,
        "functions": [
          {
            "name": "GetCurrentStatus_Unlocked",
            "return_type": "StatusInfo",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetCurrentStatus",
            "return_type": "StatusInfo",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ShouldUpdate",
            "return_type": "bool",
            "parameters": "const StatusInfo& newStatus",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "UpdateConnectionStatus",
            "return_type": "void",
            "parameters": "const std::string& status, Priority priority = Priority::Normal",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "UpdateTransmissionStatus",
            "return_type": "void",
            "parameters": "const std::string& status, Priority priority = Priority::Normal",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "UpdateProgressStatus",
            "return_type": "void",
            "parameters": "const std::string& status, Priority priority = Priority::Normal",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "UpdateErrorStatus",
            "return_type": "void",
            "parameters": "const std::string& status, Priority priority = Priority::High",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ApplyStatusToControl",
            "return_type": "bool",
            "parameters": "CStatic* pStaticControl",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ForceNextUpdate",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ClearStatus",
            "return_type": "void",
            "parameters": "StatusType type",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ClearAllStatus",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "HasPendingUpdate",
            "return_type": "bool",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 24,
          "average_cyclomatic_complexity": 2.0,
          "max_cyclomatic_complexity": 2,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "Transport/ITransport.h",
        "lines_of_code": 85,
        "function_count": 0,
        "functions": [],
        "complexity": {
          "total_cyclomatic_complexity": 0,
          "average_cyclomatic_complexity": 0,
          "max_cyclomatic_complexity": 0,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "include/Resource.h",
        "lines_of_code": 65,
        "function_count": 0,
        "functions": [],
        "complexity": {
          "total_cyclomatic_complexity": 0,
          "average_cyclomatic_complexity": 0,
          "max_cyclomatic_complexity": 0,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "test_reliable_channel_fix.cpp",
        "lines_of_code": 289,
        "function_count": 18,
        "functions": [
          {
            "name": "InitializeConnection",
            "return_type": "bool",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestSevereIncompleteTransfer",
            "return_type": "bool",
            "parameters": "",
            "lines": 7,
            "cyclomatic_complexity": 2
          },
          {
            "name": "outFile",
            "return_type": "ofstream",
            "parameters": "testFile, ios::binary",
            "lines": 7,
            "cyclomatic_complexity": 2
          },
          {
            "name": "senderThread",
            "return_type": "thread",
            "parameters": "[&](",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "receiverThread",
            "return_type": "thread",
            "parameters": "[&](",
            "lines": 19,
            "cyclomatic_complexity": 5
          },
          {
            "name": "receivedFileStream",
            "return_type": "ifstream",
            "parameters": "receivedFile, ios::binary | ios::ate",
            "lines": 17,
            "cyclomatic_complexity": 2
          },
          {
            "name": "TestNearlyCompleteTransfer",
            "return_type": "bool",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "outFile",
            "return_type": "ofstream",
            "parameters": "testFile, ios::binary",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "senderThread",
            "return_type": "thread",
            "parameters": "[&](",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "receiverThread",
            "return_type": "thread",
            "parameters": "[&](",
            "lines": 14,
            "cyclomatic_complexity": 5
          },
          {
            "name": "receivedFileStream",
            "return_type": "ifstream",
            "parameters": "receivedFile, ios::binary | ios::ate",
            "lines": 18,
            "cyclomatic_complexity": 2
          },
          {
            "name": "TestPartialCompleteTransfer",
            "return_type": "bool",
            "parameters": "",
            "lines": 6,
            "cyclomatic_complexity": 2
          },
          {
            "name": "outFile",
            "return_type": "ofstream",
            "parameters": "testFile, ios::binary",
            "lines": 6,
            "cyclomatic_complexity": 2
          },
          {
            "name": "senderThread",
            "return_type": "thread",
            "parameters": "[&](",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "receiverThread",
            "return_type": "thread",
            "parameters": "[&](",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "receivedFileStream",
            "return_type": "ifstream",
            "parameters": "receivedFile, ios::binary | ios::ate",
            "lines": 12,
            "cyclomatic_complexity": 3
          },
          {
            "name": "RunAllTests",
            "return_type": "void",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "main",
            "return_type": "int",
            "parameters": "",
            "lines": 10,
            "cyclomatic_complexity": 2
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 37,
          "average_cyclomatic_complexity": 2.0555555555555554,
          "max_cyclomatic_complexity": 5,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "AutoTest/UI_Test_Console.cpp",
        "lines_of_code": 250,
        "function_count": 9,
        "functions": [
          {
            "name": "RunFullTest",
            "return_type": "bool",
            "parameters": "",
            "lines": 43,
            "cyclomatic_complexity": 6
          },
          {
            "name": "Step1_LocalLoopbackTest",
            "return_type": "bool",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 2
          },
          {
            "name": "Step2_EnableReliableTransmission",
            "return_type": "bool",
            "parameters": "",
            "lines": 29,
            "cyclomatic_complexity": 3
          },
          {
            "name": "Step3_SendTestFile",
            "return_type": "bool",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Step4_ReceiveData",
            "return_type": "bool",
            "parameters": "",
            "lines": 26,
            "cyclomatic_complexity": 3
          },
          {
            "name": "Step5_VerifyFileIntegrity",
            "return_type": "bool",
            "parameters": "",
            "lines": 67,
            "cyclomatic_complexity": 10
          },
          {
            "name": "LogMessage",
            "return_type": "void",
            "parameters": "const std::string& message",
            "lines": 7,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetTestResult",
            "return_type": "bool",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "main",
            "return_type": "int",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 29,
          "average_cyclomatic_complexity": 3.2222222222222223,
          "max_cyclomatic_complexity": 10,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "src/ThreadSafeUIUpdater.h",
        "lines_of_code": 95,
        "function_count": 26,
        "functions": [
          {
            "name": "WorkerThread",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ProcessUpdateOperation",
            "return_type": "void",
            "parameters": "const UIUpdateOperation& operation",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "EnsureUIThread",
            "return_type": "bool",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "Start",
            "return_type": "bool",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "Stop",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "RegisterControl",
            "return_type": "void",
            "parameters": "int controlId, void* control",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "UnregisterControl",
            "return_type": "void",
            "parameters": "int controlId",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "QueueUpdate",
            "return_type": "bool",
            "parameters": "UIUpdateType type, int controlId, const std::string& text, const std::string& reason = \"\"",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "QueueUpdate",
            "return_type": "bool",
            "parameters": "UIUpdateType type, int controlId, int numericValue, const std::string& reason = \"\"",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "QueueUpdate",
            "return_type": "bool",
            "parameters": "std::function<void()> customFunction, const std::string& reason = \"\"",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "QueueStatusUpdate",
            "return_type": "bool",
            "parameters": "int controlId, const std::string& status, const std::string& reason = \"\"",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "QueueProgressUpdate",
            "return_type": "bool",
            "parameters": "int controlId, int progress, const std::string& reason = \"\"",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "QueueButtonTextUpdate",
            "return_type": "bool",
            "parameters": "int controlId, const std::string& text, const std::string& reason = \"\"",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "QueueEditTextUpdate",
            "return_type": "bool",
            "parameters": "int controlId, const std::string& text, const std::string& reason = \"\"",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "QueueBatchUpdates",
            "return_type": "bool",
            "parameters": "const std::vector<UIUpdateOperation>& operations",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "QueuePriorityUpdate",
            "return_type": "bool",
            "parameters": "UIUpdateType type, int controlId, const std::string& text, const std::string& reason = \"\"",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ClearQueue",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetQueueSize",
            "return_type": "size_t",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "IsRunning",
            "return_type": "bool",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetProcessedCount",
            "return_type": "uint64_t",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetQueuedCount",
            "return_type": "uint64_t",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetDroppedCount",
            "return_type": "uint64_t",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "WaitForCompletion",
            "return_type": "bool",
            "parameters": "int timeoutMs = 5000",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "DumpStatistics",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "SetMaxQueueSize",
            "return_type": "void",
            "parameters": "size_t maxSize",
            "lines": 3,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetMaxQueueSize",
            "return_type": "size_t",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 2
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 52,
          "average_cyclomatic_complexity": 2.0,
          "max_cyclomatic_complexity": 2,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "include/pch.h",
        "lines_of_code": 5,
        "function_count": 0,
        "functions": [],
        "complexity": {
          "total_cyclomatic_complexity": 0,
          "average_cyclomatic_complexity": 0,
          "max_cyclomatic_complexity": 0,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "src/ThreadSafeUIUpdater.cpp",
        "lines_of_code": 276,
        "function_count": 8,
        "functions": [
          {
            "name": "operation",
            "return_type": "UIUpdateOperation",
            "parameters": "type, controlId, text, 0, reason",
            "lines": 20,
            "cyclomatic_complexity": 3
          },
          {
            "name": "operation",
            "return_type": "UIUpdateOperation",
            "parameters": "type, controlId, \"\", numericValue, reason",
            "lines": 20,
            "cyclomatic_complexity": 4
          },
          {
            "name": "operation",
            "return_type": "UIUpdateOperation",
            "parameters": "customFunction, reason",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "QueueUpdate",
            "return_type": "return",
            "parameters": "UIUpdateType::UpdateStatusText, controlId, status, reason",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "QueueUpdate",
            "return_type": "return",
            "parameters": "UIUpdateType::UpdateProgressBar, controlId, progress, reason",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "QueueUpdate",
            "return_type": "return",
            "parameters": "UIUpdateType::UpdateButtonState, controlId, text, reason",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "QueueUpdate",
            "return_type": "return",
            "parameters": "UIUpdateType::UpdateEditText, controlId, text, reason",
            "lines": 20,
            "cyclomatic_complexity": 4
          },
          {
            "name": "priorityOperation",
            "return_type": "UIUpdateOperation",
            "parameters": "type, controlId, text, 0, reason",
            "lines": 4,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 16,
          "average_cyclomatic_complexity": 2.0,
          "max_cyclomatic_complexity": 4,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "test_protocol_diagnosis.cpp",
        "lines_of_code": 291,
        "function_count": 13,
        "functions": [
          {
            "name": "TestBasicConnection",
            "return_type": "bool",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestSmallFileTransfer",
            "return_type": "bool",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "outFile",
            "return_type": "ofstream",
            "parameters": "testFile, ios::binary",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "senderThread",
            "return_type": "thread",
            "parameters": "[&](",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "receiverThread",
            "return_type": "thread",
            "parameters": "[&](",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "receivedFileStream",
            "return_type": "ifstream",
            "parameters": "receivedFile, ios::binary | ios::ate",
            "lines": 19,
            "cyclomatic_complexity": 2
          },
          {
            "name": "TestLargeFileIssue",
            "return_type": "bool",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "outFile",
            "return_type": "ofstream",
            "parameters": "testFile, ios::binary",
            "lines": 13,
            "cyclomatic_complexity": 4
          },
          {
            "name": "senderThread",
            "return_type": "thread",
            "parameters": "[&](",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "receiverThread",
            "return_type": "thread",
            "parameters": "[&](",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "receivedFileStream",
            "return_type": "ifstream",
            "parameters": "receivedFile, ios::binary | ios::ate",
            "lines": 22,
            "cyclomatic_complexity": 3
          },
          {
            "name": "RunDiagnosis",
            "return_type": "void",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "main",
            "return_type": "int",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 20,
          "average_cyclomatic_complexity": 1.5384615384615385,
          "max_cyclomatic_complexity": 4,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "include/targetver.h",
        "lines_of_code": 5,
        "function_count": 0,
        "functions": [],
        "complexity": {
          "total_cyclomatic_complexity": 0,
          "average_cyclomatic_complexity": 0,
          "max_cyclomatic_complexity": 0,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "test_reliable_auto.cpp",
        "lines_of_code": 226,
        "function_count": 10,
        "functions": [
          {
            "name": "OnError",
            "return_type": "void",
            "parameters": "const string& msg",
            "lines": 9,
            "cyclomatic_complexity": 4
          },
          {
            "name": "OnSendProgress",
            "return_type": "void",
            "parameters": "uint64_t current, uint64_t total, const string& filename",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "OnRecvProgress",
            "return_type": "void",
            "parameters": "uint64_t current, uint64_t total, const string& filename",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "OnStateChanged",
            "return_type": "void",
            "parameters": "ReliableState state",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "state == ReliableState::RELIABLE_FAILED",
            "lines": 19,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ReadFile",
            "return_type": "bool",
            "parameters": "const string& path, vector<uint8_t>& data",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "file",
            "return_type": "ifstream",
            "parameters": "path, ios::binary",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "WriteFile",
            "return_type": "bool",
            "parameters": "const string& path, const vector<uint8_t>& data",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "file",
            "return_type": "ofstream",
            "parameters": "path, ios::binary",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "main",
            "return_type": "int",
            "parameters": "int argc, char* argv[]",
            "lines": 3,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 16,
          "average_cyclomatic_complexity": 1.6,
          "max_cyclomatic_complexity": 4,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "src/TransmissionStateManager.cpp",
        "lines_of_code": 198,
        "function_count": 0,
        "functions": [],
        "complexity": {
          "total_cyclomatic_complexity": 0,
          "average_cyclomatic_complexity": 0,
          "max_cyclomatic_complexity": 0,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "test_reliable_loopback.cpp",
        "lines_of_code": 266,
        "function_count": 9,
        "functions": [
          {
            "name": "OnError",
            "return_type": "void",
            "parameters": "const std::string& errorMsg",
            "lines": 16,
            "cyclomatic_complexity": 5
          },
          {
            "name": "OnReceiveProgress",
            "return_type": "void",
            "parameters": "uint64_t current, uint64_t total, const std::string& filename",
            "lines": 6,
            "cyclomatic_complexity": 2
          },
          {
            "name": "OnSendProgress",
            "return_type": "void",
            "parameters": "uint64_t current, uint64_t total, const std::string& filename",
            "lines": 6,
            "cyclomatic_complexity": 2
          },
          {
            "name": "OnStateChanged",
            "return_type": "void",
            "parameters": "ReliableState newState",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "newState == ReliableState::RELIABLE_FAILED",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "OnDataReceived",
            "return_type": "void",
            "parameters": "const uint8_t* data, size_t size",
            "lines": 19,
            "cyclomatic_complexity": 2
          },
          {
            "name": "ReadFile",
            "return_type": "bool",
            "parameters": "const std::string& filepath, std::vector<uint8_t>& data",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SaveFile",
            "return_type": "bool",
            "parameters": "const std::string& filepath, const std::vector<uint8_t>& data",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "main",
            "return_type": "int",
            "parameters": "int argc, char* argv[]",
            "lines": 3,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 16,
          "average_cyclomatic_complexity": 1.7777777777777777,
          "max_cyclomatic_complexity": 5,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "src/pch.cpp",
        "lines_of_code": 2,
        "function_count": 0,
        "functions": [],
        "complexity": {
          "total_cyclomatic_complexity": 0,
          "average_cyclomatic_complexity": 0,
          "max_cyclomatic_complexity": 0,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "AutoTest/TestFramework.h",
        "lines_of_code": 244,
        "function_count": 11,
        "functions": [
          {
            "name": "TestSuite",
            "return_type": "explicit",
            "parameters": "const std::string& name) : m_name(name",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "AssertTrue",
            "return_type": "void",
            "parameters": "bool condition, const std::string& msg",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "AssertFalse",
            "return_type": "void",
            "parameters": "bool condition, const std::string& msg",
            "lines": 8,
            "cyclomatic_complexity": 2
          },
          {
            "name": "AssertEqual",
            "return_type": "void",
            "parameters": "int expected, int actual, const std::string& msg",
            "lines": 6,
            "cyclomatic_complexity": 1
          },
          {
            "name": "AssertNotEqual",
            "return_type": "void",
            "parameters": "int expected, int actual, const std::string& msg",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "AssertGreater",
            "return_type": "void",
            "parameters": "int value, int threshold, const std::string& msg",
            "lines": 6,
            "cyclomatic_complexity": 1
          },
          {
            "name": "RegisterSuite",
            "return_type": "void",
            "parameters": "std::shared_ptr<TestSuite> suite",
            "lines": 35,
            "cyclomatic_complexity": 3
          },
          {
            "name": "RunAll",
            "return_type": "void",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 2
          },
          {
            "name": "RunSuite",
            "return_type": "void",
            "parameters": "const std::string& suiteName",
            "lines": 10,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GenerateJsonReport",
            "return_type": "void",
            "parameters": "const std::string& filename",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "PrintSummary",
            "return_type": "void",
            "parameters": "double totalDuration",
            "lines": 7,
            "cyclomatic_complexity": 2
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 17,
          "average_cyclomatic_complexity": 1.5454545454545454,
          "max_cyclomatic_complexity": 3,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "Transport/NetworkPrintTransport.cpp",
        "lines_of_code": 1110,
        "function_count": 20,
        "functions": [
          {
            "name": "SendData",
            "return_type": "return",
            "parameters": "&keepalive, 0, &sent",
            "lines": 14,
            "cyclomatic_complexity": 3
          },
          {
            "name": "Write",
            "return_type": "return",
            "parameters": "data.data(), data.size()",
            "lines": 9,
            "cyclomatic_complexity": 2
          },
          {
            "name": "SendLPRCommand",
            "return_type": "return",
            "parameters": "command",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetSocketError",
            "return_type": "return",
            "parameters": "",
            "lines": 8,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetSocketError",
            "return_type": "return",
            "parameters": "",
            "lines": 55,
            "cyclomatic_complexity": 11
          },
          {
            "name": "GetSocketError",
            "return_type": "return",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "selectResult == SOCKET_ERROR",
            "lines": 4,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetSocketError",
            "return_type": "return",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GetSocketError",
            "return_type": "return",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 2
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "result == 0",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SendData",
            "return_type": "return",
            "parameters": "data, size, &sent",
            "lines": 62,
            "cyclomatic_complexity": 18
          },
          {
            "name": "SendHTTPRequest",
            "return_type": "return",
            "parameters": "\"POST\", m_config.httpPath, ippRequest, m_config.contentType",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SendData",
            "return_type": "return",
            "parameters": "command.c_str(), command.length(), &sent",
            "lines": 13,
            "cyclomatic_complexity": 3
          },
          {
            "name": "BasicAuthenticate",
            "return_type": "return",
            "parameters": "",
            "lines": 22,
            "cyclomatic_complexity": 3
          },
          {
            "name": "NTLMAuthenticate",
            "return_type": "return",
            "parameters": "",
            "lines": 22,
            "cyclomatic_complexity": 3
          },
          {
            "name": "CertificateAuthenticate",
            "return_type": "return",
            "parameters": "",
            "lines": 22,
            "cyclomatic_complexity": 3
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "result != TransportError::Timeout",
            "lines": 28,
            "cyclomatic_complexity": 4
          },
          {
            "name": "GetSocketError",
            "return_type": "return",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetSocketError",
            "return_type": "return",
            "parameters": "",
            "lines": 20,
            "cyclomatic_complexity": 4
          },
          {
            "name": "GetSocketError",
            "return_type": "return",
            "parameters": "",
            "lines": 21,
            "cyclomatic_complexity": 9
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 76,
          "average_cyclomatic_complexity": 3.8,
          "max_cyclomatic_complexity": 18,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "Transport/NetworkPrintTransport.h",
        "lines_of_code": 232,
        "function_count": 61,
        "functions": [
          {
            "name": "Open",
            "return_type": "TransportError",
            "parameters": "const TransportConfig& config",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Close",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Write",
            "return_type": "TransportError",
            "parameters": "const void* data, size_t size, size_t* written = nullptr",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Read",
            "return_type": "TransportError",
            "parameters": "void* buffer, size_t size, size_t* read, DWORD timeout = INFINITE",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "WriteAsync",
            "return_type": "TransportError",
            "parameters": "const void* data, size_t size",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "StartAsyncRead",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "StopAsyncRead",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetState",
            "return_type": "TransportState",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsOpen",
            "return_type": "bool",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetStats",
            "return_type": "TransportStats",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ResetStats",
            "return_type": "void",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetDataReceivedCallback",
            "return_type": "void",
            "parameters": "DataReceivedCallback callback",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetStateChangedCallback",
            "return_type": "void",
            "parameters": "StateChangedCallback callback",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetErrorOccurredCallback",
            "return_type": "void",
            "parameters": "ErrorOccurredCallback callback",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "FlushBuffers",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetAvailableBytes",
            "return_type": "size_t",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetConnectionState",
            "return_type": "NetworkConnectionState",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetRemotePort",
            "return_type": "WORD",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetProtocol",
            "return_type": "NetworkPrintProtocol",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SendJob",
            "return_type": "TransportError",
            "parameters": "const std::vector<uint8_t>& data, const std::string& jobName = \"\"",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "CancelJob",
            "return_type": "TransportError",
            "parameters": "const std::string& jobId",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetJobStatus",
            "return_type": "LPRJobStatus",
            "parameters": "const std::string& jobId",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ResolveHostname",
            "return_type": "bool",
            "parameters": "const std::string& hostname, std::string& ipAddress",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsValidIPAddress",
            "return_type": "bool",
            "parameters": "const std::string& ip",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsPortOpen",
            "return_type": "bool",
            "parameters": "const std::string& hostname, WORD port, DWORD timeout = 3000",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetState",
            "return_type": "void",
            "parameters": "TransportState newState",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetConnectionState",
            "return_type": "void",
            "parameters": "NetworkConnectionState newState",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "NotifyError",
            "return_type": "void",
            "parameters": "TransportError error, const std::string& message",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "UpdateStats",
            "return_type": "void",
            "parameters": "uint64_t bytesSent, uint64_t bytesReceived",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "InitializeWinsock",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "CleanupWinsock",
            "return_type": "void",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "CreateSocket",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "CloseSocket",
            "return_type": "void",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ConnectToHost",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SendData",
            "return_type": "TransportError",
            "parameters": "const void* data, size_t size, size_t* sent",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ReceiveData",
            "return_type": "TransportError",
            "parameters": "void* buffer, size_t size, size_t* received, DWORD timeout",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SendRAWData",
            "return_type": "TransportError",
            "parameters": "const void* data, size_t size",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SendLPRJob",
            "return_type": "TransportError",
            "parameters": "const void* data, size_t size, const std::string& jobName",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SendIPPJob",
            "return_type": "TransportError",
            "parameters": "const void* data, size_t size, const std::string& jobName",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SendLPRCommand",
            "return_type": "TransportError",
            "parameters": "const std::string& command",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ReceiveLPRResponse",
            "return_type": "TransportError",
            "parameters": "std::string& response",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ReceiveHTTPResponse",
            "return_type": "TransportError",
            "parameters": "std::vector<uint8_t>& response",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Authenticate",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "BasicAuthenticate",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "NTLMAuthenticate",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "CertificateAuthenticate",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "InitializeSSL",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "CleanupSSL",
            "return_type": "void",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SSLHandshake",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "AsyncReadThread",
            "return_type": "void",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "AsyncWriteThread",
            "return_type": "void",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ReconnectThread",
            "return_type": "void",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetSocketError",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ValidateConfig",
            "return_type": "bool",
            "parameters": "const NetworkPrintConfig& config",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ResolveHostAddress",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetSocketTimeouts",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetSocketOptions",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "EnableKeepAlive",
            "return_type": "TransportError",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "KeepAliveMonitor",
            "return_type": "void",
            "parameters": "",
            "lines": 17,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ConvertToTransportError",
            "return_type": "TransportError",
            "parameters": "NetworkPrintError error",
            "lines": 18,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ConvertFromSocketError",
            "return_type": "NetworkPrintError",
            "parameters": "int socketError",
            "lines": 18,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 61,
          "average_cyclomatic_complexity": 1.0,
          "max_cyclomatic_complexity": 1,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "Protocol/FrameCodec.h",
        "lines_of_code": 87,
        "function_count": 7,
        "functions": [
          {
            "name": "DecodeFrame",
            "return_type": "Frame",
            "parameters": "const std::vector<uint8_t>& data",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "DecodeStartMetadata",
            "return_type": "bool",
            "parameters": "const std::vector<uint8_t>& payload, StartMetadata& metadata",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "AppendData",
            "return_type": "void",
            "parameters": "const std::vector<uint8_t>& data",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TryGetFrame",
            "return_type": "bool",
            "parameters": "Frame& frame",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ClearBuffer",
            "return_type": "void",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetBufferSize",
            "return_type": "size_t",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetMaxPayloadSize",
            "return_type": "void",
            "parameters": "size_t size",
            "lines": 1,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 7,
          "average_cyclomatic_complexity": 1.0,
          "max_cyclomatic_complexity": 1,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "Transport/UsbPrintTransport.cpp",
        "lines_of_code": 579,
        "function_count": 5,
        "functions": [
          {
            "name": "WriteToDevice",
            "return_type": "return",
            "parameters": "data, size, written",
            "lines": 13,
            "cyclomatic_complexity": 4
          },
          {
            "name": "ReadFromDevice",
            "return_type": "return",
            "parameters": "buffer, size, read, timeout",
            "lines": 20,
            "cyclomatic_complexity": 5
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "result != TransportError::Timeout",
            "lines": 26,
            "cyclomatic_complexity": 4
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "error == ERROR_ACCESS_DENIED",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "error == ERROR_INVALID_HANDLE",
            "lines": 8,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 15,
          "average_cyclomatic_complexity": 3.0,
          "max_cyclomatic_complexity": 5,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "resources/resource.h",
        "lines_of_code": 64,
        "function_count": 0,
        "functions": [],
        "complexity": {
          "total_cyclomatic_complexity": 0,
          "average_cyclomatic_complexity": 0,
          "max_cyclomatic_complexity": 0,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "Transport/LoopbackTransport.h",
        "lines_of_code": 128,
        "function_count": 0,
        "functions": [],
        "complexity": {
          "total_cyclomatic_complexity": 0,
          "average_cyclomatic_complexity": 0,
          "max_cyclomatic_complexity": 0,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "Transport/TransportFactory.cpp",
        "lines_of_code": 126,
        "function_count": 8,
        "functions": [
          {
            "name": "if",
            "return_type": "else",
            "parameters": "lowerType == \"parallel\" || lowerType == \"lpt\"",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "lowerType == \"usb\" || lowerType == \"usbprint\"",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "lowerType == \"network\" || lowerType == \"tcp\" || lowerType == \"udp\"",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "lowerType == \"loopback\" || lowerType == \"test\"",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "lowerType == \"parallel\" || lowerType == \"lpt\"",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "lowerType == \"usb\" || lowerType == \"usbprint\"",
            "lines": 6,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "lowerType == \"network\" || lowerType == \"tcp\" || lowerType == \"udp\"",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "lowerType == \"loopback\" || lowerType == \"test\"",
            "lines": 56,
            "cyclomatic_complexity": 15
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 22,
          "average_cyclomatic_complexity": 2.75,
          "max_cyclomatic_complexity": 15,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "Protocol/ReliableChannel.h",
        "lines_of_code": 184,
        "function_count": 24,
        "functions": [
          {
            "name": "Initialize",
            "return_type": "bool",
            "parameters": "std::shared_ptr<ITransport> transport, const ReliableConfig &config",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Shutdown",
            "return_type": "void",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Connect",
            "return_type": "bool",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Disconnect",
            "return_type": "bool",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsConnected",
            "return_type": "bool",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Send",
            "return_type": "bool",
            "parameters": "const std::vector<uint8_t> &data",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Send",
            "return_type": "bool",
            "parameters": "const void *data, size_t size",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Receive",
            "return_type": "bool",
            "parameters": "std::vector<uint8_t> &data, uint32_t timeout = 0",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "Receive",
            "return_type": "size_t",
            "parameters": "void *buffer, size_t size, uint32_t timeout = 0",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SendFile",
            "return_type": "bool",
            "parameters": "const std::string &filePath, std::function<void(int64_t, int64_t)> progressCallback = nullptr",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ReceiveFile",
            "return_type": "bool",
            "parameters": "const std::string &filePath, std::function<void(int64_t, int64_t)> progressCallback = nullptr",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetConfig",
            "return_type": "void",
            "parameters": "const ReliableConfig &config",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetConfig",
            "return_type": "ReliableConfig",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetStats",
            "return_type": "ReliableStats",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ResetStats",
            "return_type": "void",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetDataReceivedCallback",
            "return_type": "void",
            "parameters": "std::function<void(const std::vector<uint8_t> &)> callback",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetStateChangedCallback",
            "return_type": "void",
            "parameters": "std::function<void(bool)> callback",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetErrorCallback",
            "return_type": "void",
            "parameters": "std::function<void(const std::string &)> callback",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetProgressCallback",
            "return_type": "void",
            "parameters": "std::function<void(int64_t, int64_t)> callback",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetLocalSequence",
            "return_type": "uint16_t",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetRemoteSequence",
            "return_type": "uint16_t",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetSendQueueSize",
            "return_type": "size_t",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "GetReceiveQueueSize",
            "return_type": "size_t",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsFileTransferActive",
            "return_type": "bool",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 24,
          "average_cyclomatic_complexity": 1.0,
          "max_cyclomatic_complexity": 1,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "Common/CommonTypes.h",
        "lines_of_code": 237,
        "function_count": 3,
        "functions": [
          {
            "name": "Format",
            "return_type": "return",
            "parameters": "\"[错误码: %lu] %s\", errorCode, message.c_str()",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ScopeGuard",
            "return_type": "explicit",
            "parameters": "T&& func) : m_func(std::move(func)), m_dismissed(false",
            "lines": 6,
            "cyclomatic_complexity": 2
          },
          {
            "name": "Dismiss",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 4,
          "average_cyclomatic_complexity": 1.3333333333333333,
          "max_cyclomatic_complexity": 2,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "test_ui_managers.cpp",
        "lines_of_code": 434,
        "function_count": 13,
        "functions": [
          {
            "name": "recordTest",
            "return_type": "void",
            "parameters": "bool passed",
            "lines": 8,
            "cyclomatic_complexity": 2
          },
          {
            "name": "printSummary",
            "return_type": "void",
            "parameters": "",
            "lines": 8,
            "cyclomatic_complexity": 3
          },
          {
            "name": "SetText",
            "return_type": "void",
            "parameters": "const std::string& text",
            "lines": 4,
            "cyclomatic_complexity": 2
          },
          {
            "name": "EnableWindow",
            "return_type": "void",
            "parameters": "bool enable",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "IsEnabled",
            "return_type": "bool",
            "parameters": "",
            "lines": 35,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestUIStateManager",
            "return_type": "void",
            "parameters": "",
            "lines": 63,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestTransmissionStateManager",
            "return_type": "void",
            "parameters": "",
            "lines": 7,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestButtonStateManager",
            "return_type": "void",
            "parameters": "",
            "lines": 67,
            "cyclomatic_complexity": 2
          },
          {
            "name": "TestThreadSafeUIUpdater",
            "return_type": "void",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestThreadSafeProgressManager",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestThreadSafety",
            "return_type": "void",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestIntegration",
            "return_type": "void",
            "parameters": "",
            "lines": 32,
            "cyclomatic_complexity": 7
          },
          {
            "name": "main",
            "return_type": "int",
            "parameters": "",
            "lines": 21,
            "cyclomatic_complexity": 3
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 26,
          "average_cyclomatic_complexity": 2.0,
          "max_cyclomatic_complexity": 7,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "AutoTest/RegressionTestFramework.h",
        "lines_of_code": 443,
        "function_count": 7,
        "functions": [
          {
            "name": "SaveBaseline",
            "return_type": "return",
            "parameters": "baseline, version",
            "lines": 32,
            "cyclomatic_complexity": 4
          },
          {
            "name": "LoadBaseline",
            "return_type": "bool",
            "parameters": "const std::string& version, RegressionBaseline& baseline",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "currentValue < baselineValue * 0.9",
            "lines": 12,
            "cyclomatic_complexity": 2
          },
          {
            "name": "GenerateRegressionReport",
            "return_type": "void",
            "parameters": "const RegressionReport& report, const std::string& filename",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SaveBaseline",
            "return_type": "bool",
            "parameters": "const RegressionBaseline& baseline, const std::string& version",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "RunAndCreateBaseline",
            "return_type": "bool",
            "parameters": "const std::string& version",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "AutoRegression",
            "return_type": "RegressionReport",
            "parameters": "const std::string& currentVersion",
            "lines": 9,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 11,
          "average_cyclomatic_complexity": 1.5714285714285714,
          "max_cyclomatic_complexity": 4,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "AutoTest/PerformanceTests.h",
        "lines_of_code": 198,
        "function_count": 9,
        "functions": [
          {
            "name": "SetUp",
            "return_type": "void",
            "parameters": "",
            "lines": 9,
            "cyclomatic_complexity": 3
          },
          {
            "name": "TearDown",
            "return_type": "void",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestThroughput",
            "return_type": "void",
            "parameters": "size_t dataSize",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetUp",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 2
          },
          {
            "name": "TearDown",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestWindowSize",
            "return_type": "void",
            "parameters": "int windowSize",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SetUp",
            "return_type": "void",
            "parameters": "",
            "lines": 9,
            "cyclomatic_complexity": 3
          },
          {
            "name": "TearDown",
            "return_type": "void",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestLatency",
            "return_type": "void",
            "parameters": "int latency_ms",
            "lines": 3,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 14,
          "average_cyclomatic_complexity": 1.5555555555555556,
          "max_cyclomatic_complexity": 3,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "src/ThreadSafeProgressManager.cpp",
        "lines_of_code": 272,
        "function_count": 4,
        "functions": [
          {
            "name": "progressInfo",
            "return_type": "ProgressInfo",
            "parameters": "current, total, GetStatusText()",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "progressInfo",
            "return_type": "ProgressInfo",
            "parameters": "m_currentProgress.load(), m_totalProgress.load(), statusText",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ProgressInfo",
            "return_type": "return",
            "parameters": "m_currentProgress.load(), m_totalProgress.load(), GetStatusText()",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "progressInfo",
            "return_type": "ProgressInfo",
            "parameters": "0, 0, statusText",
            "lines": 4,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 4,
          "average_cyclomatic_complexity": 1.0,
          "max_cyclomatic_complexity": 1,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "Protocol/FrameCodec.cpp",
        "lines_of_code": 305,
        "function_count": 7,
        "functions": [
          {
            "name": "EncodeFrame",
            "return_type": "return",
            "parameters": "FrameType::FRAME_START, sequence, payload",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "EncodeFrame",
            "return_type": "return",
            "parameters": "FrameType::FRAME_DATA, sequence, data",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "EncodeFrame",
            "return_type": "return",
            "parameters": "FrameType::FRAME_END, sequence, empty",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "EncodeFrame",
            "return_type": "return",
            "parameters": "FrameType::FRAME_ACK, sequence, empty",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "EncodeFrame",
            "return_type": "return",
            "parameters": "FrameType::FRAME_NAK, sequence, empty",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "EncodeFrame",
            "return_type": "return",
            "parameters": "FrameType::FRAME_HEARTBEAT, sequence, empty",
            "lines": 70,
            "cyclomatic_complexity": 8
          },
          {
            "name": "DeserializeStartMetadata",
            "return_type": "return",
            "parameters": "payload.data(), payload.size(), metadata",
            "lines": 3,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 14,
          "average_cyclomatic_complexity": 2.0,
          "max_cyclomatic_complexity": 8,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "Transport/UsbPrintTransport.h",
        "lines_of_code": 107,
        "function_count": 0,
        "functions": [],
        "complexity": {
          "total_cyclomatic_complexity": 0,
          "average_cyclomatic_complexity": 0,
          "max_cyclomatic_complexity": 0,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "AutoTest/ProtocolUnitTests.h",
        "lines_of_code": 413,
        "function_count": 28,
        "functions": [
          {
            "name": "SetUp",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TearDown",
            "return_type": "void",
            "parameters": "",
            "lines": 31,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestCRC32Calculation",
            "return_type": "void",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 2
          },
          {
            "name": "TestCRC32Verification",
            "return_type": "void",
            "parameters": "",
            "lines": 27,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestEncodeDataFrame",
            "return_type": "void",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestEncodeStartFrame",
            "return_type": "void",
            "parameters": "",
            "lines": 15,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestEncodeEndFrame",
            "return_type": "void",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestEncodeAckFrame",
            "return_type": "void",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestEncodeNakFrame",
            "return_type": "void",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestEncodeHeartbeatFrame",
            "return_type": "void",
            "parameters": "",
            "lines": 22,
            "cyclomatic_complexity": 2
          },
          {
            "name": "TestDecodeDataFrame",
            "return_type": "void",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestDecodeStartFrame",
            "return_type": "void",
            "parameters": "",
            "lines": 10,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestDecodeInvalidFrame",
            "return_type": "void",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestBufferAppendExtract",
            "return_type": "void",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestMultipleFramesInBuffer",
            "return_type": "void",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestPartialFrameHandling",
            "return_type": "void",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestEmptyPayload",
            "return_type": "void",
            "parameters": "",
            "lines": 20,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestMaxPayloadSize",
            "return_type": "void",
            "parameters": "",
            "lines": 265,
            "cyclomatic_complexity": 7
          },
          {
            "name": "SetUp",
            "return_type": "void",
            "parameters": "",
            "lines": 13,
            "cyclomatic_complexity": 4
          },
          {
            "name": "TearDown",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestInitialize",
            "return_type": "void",
            "parameters": "",
            "lines": 14,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestConnectDisconnect",
            "return_type": "void",
            "parameters": "",
            "lines": 27,
            "cyclomatic_complexity": 2
          },
          {
            "name": "TestSmallDataTransfer",
            "return_type": "void",
            "parameters": "",
            "lines": 1,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestLargeDataTransfer",
            "return_type": "void",
            "parameters": "",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestStatistics",
            "return_type": "void",
            "parameters": "",
            "lines": 20,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestStatisticsReset",
            "return_type": "void",
            "parameters": "",
            "lines": 18,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestConfigUpdate",
            "return_type": "void",
            "parameters": "",
            "lines": 22,
            "cyclomatic_complexity": 1
          },
          {
            "name": "TestSequenceNumbers",
            "return_type": "void",
            "parameters": "",
            "lines": 16,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 40,
          "average_cyclomatic_complexity": 1.4285714285714286,
          "max_cyclomatic_complexity": 7,
          "high_complexity_functions": []
        },
        "issues": [
          {
            "severity": "medium",
            "type": "long_function",
            "function": "TestMaxPayloadSize",
            "lines": 265,
            "message": "函数TestMaxPayloadSize行数过多: 265行",
            "suggestion": "考虑拆分为多个小函数"
          }
        ]
      },
      {
        "file": "src/PortMasterDlg.h",
        "lines_of_code": 210,
        "function_count": 31,
        "functions": [
          {
            "name": "DoDataExchange",
            "return_type": "void",
            "parameters": "CDataExchange *pDX",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "OnInitDialog",
            "return_type": "BOOL",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "LogMessage",
            "return_type": "void",
            "parameters": "const CString &message",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "WriteLog",
            "return_type": "void",
            "parameters": "const std::string &message",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "UpdatePortParameters",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SendData",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ReceiveData",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "UpdateDataDisplay",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "LoadDataFromFile",
            "return_type": "void",
            "parameters": "const CString &filePath",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SaveDataToFile",
            "return_type": "void",
            "parameters": "const CString &filePath, const CString &data",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "SaveBinaryDataToFile",
            "return_type": "void",
            "parameters": "const CString &filePath, const std::vector<uint8_t> &data",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "StartTransmission",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "PauseTransmission",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ResumeTransmission",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "PerformDataTransmission",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ClearAllCacheData",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "OnTransmissionProgress",
            "return_type": "void",
            "parameters": "const TransmissionProgress& progress",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "OnTransmissionCompleted",
            "return_type": "void",
            "parameters": "const TransmissionResult& result",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "OnTransmissionLog",
            "return_type": "void",
            "parameters": "const std::string& message",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "StringToHex",
            "return_type": "CString",
            "parameters": "const CString &str",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "BytesToHex",
            "return_type": "CString",
            "parameters": "const BYTE* data, size_t length",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "HexToString",
            "return_type": "CString",
            "parameters": "const CString &hex",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ExtractHexAsciiText",
            "return_type": "CString",
            "parameters": "const CString &hex",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "UpdateSendDisplayFromCache",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "UpdateReceiveDisplayFromCache",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ThrottledUpdateReceiveDisplay",
            "return_type": "void",
            "parameters": "",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "UpdateSendCache",
            "return_type": "void",
            "parameters": "const CString &data",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "UpdateSendCacheFromBytes",
            "return_type": "void",
            "parameters": "const BYTE* data, size_t length",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "UpdateSendCacheFromHex",
            "return_type": "void",
            "parameters": "const CString &hexData",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "UpdateReceiveCache",
            "return_type": "void",
            "parameters": "const std::vector<uint8_t> &data",
            "lines": 5,
            "cyclomatic_complexity": 1
          },
          {
            "name": "ThreadSafeAppendReceiveData",
            "return_type": "void",
            "parameters": "const std::vector<uint8_t> &data",
            "lines": 5,
            "cyclomatic_complexity": 1
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 31,
          "average_cyclomatic_complexity": 1.0,
          "max_cyclomatic_complexity": 1,
          "high_complexity_functions": []
        },
        "issues": []
      },
      {
        "file": "Transport/ParallelTransport.cpp",
        "lines_of_code": 771,
        "function_count": 7,
        "functions": [
          {
            "name": "WriteToPort",
            "return_type": "return",
            "parameters": "data, size, written",
            "lines": 20,
            "cyclomatic_complexity": 6
          },
          {
            "name": "ReadFromPort",
            "return_type": "return",
            "parameters": "buffer, size, read, timeout",
            "lines": 29,
            "cyclomatic_complexity": 5
          },
          {
            "name": "QueryPortStatus",
            "return_type": "return",
            "parameters": "",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "error == ERROR_ACCESS_DENIED",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "static_cast<int>(status) & static_cast<int>(ParallelPortStatus::OutOfPaper)",
            "lines": 3,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "writeError == ERROR_GEN_FAILURE",
            "lines": 4,
            "cyclomatic_complexity": 1
          },
          {
            "name": "if",
            "return_type": "else",
            "parameters": "result != TransportError::Timeout",
            "lines": 28,
            "cyclomatic_complexity": 4
          }
        ],
        "complexity": {
          "total_cyclomatic_complexity": 19,
          "average_cyclomatic_complexity": 2.7142857142857144,
          "max_cyclomatic_complexity": 6,
          "high_complexity_functions": []
        },
        "issues": []
      }
    ],
    "summary": {
      "total_files": 59,
      "total_lines_of_code": 20004,
      "total_functions": 675,
      "total_issues": 7,
      "critical_issues": 1,
      "high_issues": 0,
      "medium_issues": 6
    }
  },
  "cppcheck_analysis": null,
  "recommendations": [
    "发现1个极高复杂度函数，强烈建议重构"
  ]
}