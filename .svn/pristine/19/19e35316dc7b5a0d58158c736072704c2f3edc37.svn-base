#pragma once

#include "ITransport.h"
#include <windows.h>
#include <thread>
#include <atomic>
#include <mutex>

class SerialTransport : public ITransport
{
public:
    SerialTransport();
    virtual ~SerialTransport();

    // ITransport 鎺ュ彛瀹炵幇
    virtual bool Open(const TransportConfig& config) override;
    virtual void Close() override;
    virtual bool IsOpen() const override;
    virtual TransportState GetState() const override;

    virtual bool Configure(const TransportConfig& config) override;
    virtual TransportConfig GetConfiguration() const override;

    virtual size_t Write(const std::vector<uint8_t>& data) override;
    virtual size_t Write(const uint8_t* data, size_t length) override;
    virtual size_t Read(std::vector<uint8_t>& data, size_t maxLength = 0) override;
    virtual size_t Available() const override;

    virtual std::string GetLastError() const override;
    virtual std::string GetPortName() const override;
    virtual std::string GetTransportType() const override;

    virtual void SetDataReceivedCallback(DataReceivedCallback callback) override;
    virtual void SetStateChangedCallback(StateChangedCallback callback) override;

    virtual bool Flush() override;
    virtual bool ClearBuffers() override;

    // 串口特有功能
    static std::vector<std::string> EnumeratePorts();
    void SetPortName(const std::string& portName);
    bool SetDTR(bool enable);
    bool SetRTS(bool enable);
    bool GetCTS() const;
    bool GetDSR() const;

private:
    HANDLE m_hComm;
    std::string m_portName;
    OVERLAPPED m_readOverlapped;
    OVERLAPPED m_writeOverlapped;
    
    // 璇诲彇绾跨▼
    std::thread m_readThread;
    std::atomic<bool> m_stopRead;
    mutable std::mutex m_mutex;
    std::vector<uint8_t> m_readBuffer;

    // 鍐呴儴鏂规硶
    bool ConfigurePort();
    void ReadThreadFunc();
    bool SetupOverlapped();
    void CleanupOverlapped();
    std::string GetSystemErrorString(DWORD error) const;

protected:
    // 基类纯虚函数实现
    virtual void NotifyDataReceived(const std::vector<uint8_t>& data) override;
    virtual void NotifyStateChanged(TransportState state, const std::string& message = "") override;
    virtual void SetLastError(const std::string& error) override;
};