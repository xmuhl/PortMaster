#include "pch.h"
#include "framework.h"
#include "PortMaster.h"
#include "PortMasterDlg.h"
#include "Resource.h"
#include "PortConfigDialog.h"
#include "TestWizardDialog.h"
#include "Transport/TcpTransport.h"
#include "Transport/UdpTransport.h"
#include "Common/ConfigManager.h"
#include "afxdialogex.h"
#include <fstream>
#include <filesystem>
#include <Shlwapi.h>
#include <algorithm>

#pragma comment(lib, "Shlwapi.lib")

extern void WriteDebugLog(const char* message);

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

// 用于应用程序"关于"菜单项的 CAboutDlg 对话框
class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()

// CPortMasterDlg 对话框
CPortMasterDlg::CPortMasterDlg(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_PORTMASTER_DIALOG, pParent)
	, m_bConnected(false)
	, m_bReliableMode(false)
	, m_bTransmitting(false)
	, m_transmissionProgress(0)
	, m_transmissionTimer(0)
	, m_transmissionStartTime(0)
	, m_totalBytesTransmitted(0)
	, m_lastSpeedUpdateTime(0)
{
	WriteDebugLog("[DEBUG] CPortMasterDlg::CPortMasterDlg: 主对话框构造函数开始");
	m_hIcon = AfxGetApp()->LoadIcon(IDI_MAIN_ICON);
	WriteDebugLog("[DEBUG] CPortMasterDlg::CPortMasterDlg: 主对话框构造函数完成");
}

void CPortMasterDlg::DoDataExchange(CDataExchange* pDX)
{
	WriteDebugLog("[DEBUG] DoDataExchange: 开始数据交换");
	CDialogEx::DoDataExchange(pDX);
	WriteDebugLog("[DEBUG] DoDataExchange: CDialogEx::DoDataExchange 完成");

	// 逐个绑定控件，并记录调试信息
	try {
		WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_PORT_TYPE");
		DDX_Control(pDX, IDC_PORT_TYPE, m_ctrlPortType);
		
		WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_PORT_LIST");
		DDX_Control(pDX, IDC_PORT_LIST, m_ctrlPortList);
		
		WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_BAUD_RATE");
		DDX_Control(pDX, IDC_BAUD_RATE, m_ctrlBaudRate);
		
		WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_DATA_BITS");
		DDX_Control(pDX, IDC_DATA_BITS, m_ctrlDataBits);
		
		WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_PARITY");
		DDX_Control(pDX, IDC_PARITY, m_ctrlParity);
		
		WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_STOP_BITS");
		DDX_Control(pDX, IDC_STOP_BITS, m_ctrlStopBits);
		
		WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_CONNECT_BUTTON");
		DDX_Control(pDX, IDC_CONNECT_BUTTON, m_ctrlConnectBtn);
		
		WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_DISCONNECT_BUTTON");
		DDX_Control(pDX, IDC_DISCONNECT_BUTTON, m_ctrlDisconnectBtn);
		
		
		WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_SEND_BUTTON");
        DDX_Control(pDX, IDC_SEND_BUTTON, m_ctrlSendBtn);
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_CLEAR_INPUT_BUTTON");
        DDX_Control(pDX, IDC_CLEAR_INPUT_BUTTON, m_ctrlClearInputBtn);
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_CLEAR_DISPLAY_BUTTON");
        DDX_Control(pDX, IDC_CLEAR_DISPLAY_BUTTON, m_ctrlClearDisplayBtn);
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_LOAD_FILE_BUTTON");
        DDX_Control(pDX, IDC_LOAD_FILE_BUTTON, m_ctrlLoadFileBtn);
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_SAVE_FILE_BUTTON");
        DDX_Control(pDX, IDC_SAVE_FILE_BUTTON, m_ctrlSaveFileBtn);
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_COPY_HEX_BUTTON");
        DDX_Control(pDX, IDC_COPY_HEX_BUTTON, m_ctrlCopyHexBtn);
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_COPY_TEXT_BUTTON");
        DDX_Control(pDX, IDC_COPY_TEXT_BUTTON, m_ctrlCopyTextBtn);
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_RELIABLE_MODE");
        DDX_Control(pDX, IDC_RELIABLE_MODE, m_ctrlReliableMode);
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_INPUT_HEX");
        DDX_Control(pDX, IDC_INPUT_HEX, m_ctrlInputHex);
        
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_HEX_VIEW");
        DDX_Control(pDX, IDC_HEX_VIEW, m_ctrlHexView);
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_TEXT_VIEW");
        DDX_Control(pDX, IDC_TEXT_VIEW, m_ctrlTextView);
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_LOG");
        DDX_Control(pDX, IDC_LOG, m_ctrlLog);
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_PROGRESS");
        DDX_Control(pDX, IDC_PROGRESS, m_ctrlProgress);
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_CONNECTION_STATUS");
        DDX_Control(pDX, IDC_CONNECTION_STATUS, m_ctrlConnectionStatus);
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_PROTOCOL_STATUS");
        DDX_Control(pDX, IDC_PROTOCOL_STATUS, m_ctrlProtocolStatus);
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_TRANSFER_STATS");
        DDX_Control(pDX, IDC_TRANSFER_STATS, m_ctrlTransferStatus);
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_TRANSFER_SPEED");
        DDX_Control(pDX, IDC_TRANSFER_SPEED, m_ctrlTransferSpeed);
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_TRANSFER_PROGRESS");
        DDX_Control(pDX, IDC_TRANSFER_PROGRESS, m_ctrlTransferProgress);
        
        WriteDebugLog("[DEBUG] DoDataExchange: 绑定 IDC_STATUS");
        DDX_Control(pDX, IDC_STATUS, m_ctrlStatus);
        
        // DDX_Control(pDX, IDC_TIME_REMAINING, m_ctrlTimeRemaining);
        // DDX_Control(pDX, IDC_CLEAR_BUTTON, m_ctrlClearBtn);
		
		WriteDebugLog("[DEBUG] DoDataExchange: 所有控件绑定完成");
	}
	catch (...) {
		WriteDebugLog("[ERROR] DoDataExchange: 控件绑定过程中出现异常");
		throw;
	}
}

BEGIN_MESSAGE_MAP(CPortMasterDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_CONNECT_BUTTON, &CPortMasterDlg::OnBnClickedConnect)
	ON_BN_CLICKED(IDC_DISCONNECT_BUTTON, &CPortMasterDlg::OnBnClickedDisconnect)
	ON_BN_CLICKED(IDC_SEND_BUTTON, &CPortMasterDlg::OnBnClickedSend)
	ON_BN_CLICKED(IDC_CLEAR_INPUT_BUTTON, &CPortMasterDlg::OnBnClickedClearInput)
	ON_BN_CLICKED(IDC_CLEAR_DISPLAY_BUTTON, &CPortMasterDlg::OnBnClickedClearDisplay)
	ON_BN_CLICKED(IDC_CLEAR_BUTTON, &CPortMasterDlg::OnBnClickedClear)
	ON_BN_CLICKED(IDC_LOAD_FILE_BUTTON, &CPortMasterDlg::OnBnClickedLoadFile)
	ON_BN_CLICKED(IDC_SAVE_FILE_BUTTON, &CPortMasterDlg::OnBnClickedSaveFile)
	ON_BN_CLICKED(IDC_COPY_HEX_BUTTON, &CPortMasterDlg::OnBnClickedCopyHex)
	ON_BN_CLICKED(IDC_COPY_TEXT_BUTTON, &CPortMasterDlg::OnBnClickedCopyText)
	ON_CBN_SELCHANGE(IDC_PORT_TYPE, &CPortMasterDlg::OnCbnSelchangePortType)
	ON_BN_CLICKED(IDC_RELIABLE_MODE, &CPortMasterDlg::OnBnClickedReliableMode)
	ON_WM_DROPFILES()
	ON_WM_SIZE()
	ON_WM_TIMER()
END_MESSAGE_MAP()

// CPortMasterDlg 消息处理程序

BOOL CPortMasterDlg::OnInitDialog()
{
	WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 开始初始化主对话框");
	
	WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 步骤1 - 调用CDialogEx::OnInitDialog");
	
	// 现在应该可以安全调用，因为已经修复了DDX绑定和资源定义
	if (!CDialogEx::OnInitDialog()) {
		WriteDebugLog("[ERROR] PortMasterDlg::OnInitDialog: CDialogEx::OnInitDialog失败");
		return FALSE;
	}
	WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: CDialogEx::OnInitDialog成功完成");
	
	WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 步骤2 - 开始初始化复杂对象");
	try {
		// 现在在控件已经正确绑定后初始化复杂对象
		InitializeTransportObjects();
		WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 复杂对象初始化完成");
	}
	catch (...) {
		WriteDebugLog("[ERROR] PortMasterDlg::OnInitDialog: 复杂对象初始化失败");
		return FALSE;
	}

	WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 步骤3 - 开始设置系统菜单");
	// 将"关于..."菜单项添加到系统菜单中。
	// IDM_ABOUTBOX 必须在系统命令范围内。
	WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 步骤3.1 - 检查IDM_ABOUTBOX常量");
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);
	WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 步骤3.2 - IDM_ABOUTBOX常量检查完成");

	WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 步骤3.3 - 获取系统菜单");
	CMenu* pSysMenu = GetSystemMenu(FALSE);
	WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 步骤3.4 - 系统菜单获取完成");
	if (pSysMenu != nullptr)
	{
		WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 步骤3.5 - 系统菜单有效，开始加载字符串");
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 步骤3.6 - 字符串加载完成");
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 步骤3.7 - 添加菜单项");
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
			WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 步骤3.8 - 菜单项添加完成");
		}
	}
	WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 步骤3 - 系统菜单设置完成");

	try {
		WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 设置对话框图标");
		// 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动
		//  执行此操作
		SetIcon(m_hIcon, TRUE);			// 设置大图标
		SetIcon(m_hIcon, FALSE);		// 设置小图标
		WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 对话框图标设置完成");
	}
	catch (...) {
		WriteDebugLog("[ERROR] PortMasterDlg::OnInitDialog: 设置图标异常");
	}

	try {
		WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 开始初始化控件");
		// 初始化控件
		InitializeControls();
		WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 控件初始化完成");
	}
	catch (...) {
		WriteDebugLog("[ERROR] PortMasterDlg::OnInitDialog: 初始化控件异常");
		return FALSE;
	}

	try {
		WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 启用拖放功能");
		// 启用拖放
		DragAcceptFiles(TRUE);
		WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 拖放功能启用完成");
	}
	catch (...) {
		WriteDebugLog("[ERROR] PortMasterDlg::OnInitDialog: 启用拖放功能异常");
	}

	try {
		WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 窗口初始化完成");
		// TODO: 实现窗口大小自适应功能
	}
	catch (...) {
		WriteDebugLog("[ERROR] PortMasterDlg::OnInitDialog: 窗口初始化异常");
	}

	WriteDebugLog("[DEBUG] PortMasterDlg::OnInitDialog: 主对话框初始化完成");
	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CPortMasterDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。对于文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CPortMasterDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CPortMasterDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

void CPortMasterDlg::InitializeControls()
{
	WriteDebugLog("[DEBUG] PortMasterDlg::InitializeControls: 开始初始化控件");
	
	try {
		// 初始化端口类型下拉框 - 实现所有设计功能
		m_ctrlPortType.AddString(L"串口");
		m_ctrlPortType.AddString(L"并口");
		m_ctrlPortType.AddString(L"USB打印机");
		m_ctrlPortType.AddString(L"TCP客户端");
		m_ctrlPortType.AddString(L"TCP服务器");
		m_ctrlPortType.AddString(L"UDP");
		m_ctrlPortType.AddString(L"回环测试");
		
		m_ctrlPortType.SetCurSel(0); // 默认选择串口
		WriteDebugLog("[DEBUG] PortMasterDlg::InitializeControls: 端口类型下拉框初始化完成");

		// 初始化波特率下拉框
		m_ctrlBaudRate.AddString(L"9600");
		m_ctrlBaudRate.AddString(L"19200");
		m_ctrlBaudRate.AddString(L"38400");
		m_ctrlBaudRate.AddString(L"57600");
		m_ctrlBaudRate.AddString(L"115200");
		m_ctrlBaudRate.SetCurSel(0);

		// 初始化数据位下拉框
		m_ctrlDataBits.AddString(L"5");
		m_ctrlDataBits.AddString(L"6");
		m_ctrlDataBits.AddString(L"7");
		m_ctrlDataBits.AddString(L"8");
		m_ctrlDataBits.SetCurSel(3);

		// 初始化停止位下拉框
		m_ctrlStopBits.AddString(L"1");
		m_ctrlStopBits.AddString(L"1.5");
		m_ctrlStopBits.AddString(L"2");
		m_ctrlStopBits.SetCurSel(0);

		// 初始化校验位下拉框
		m_ctrlParity.AddString(L"None");
		m_ctrlParity.AddString(L"Odd");
		m_ctrlParity.AddString(L"Even");
		m_ctrlParity.AddString(L"Mark");
		m_ctrlParity.AddString(L"Space");
		m_ctrlParity.SetCurSel(0);
		WriteDebugLog("[DEBUG] PortMasterDlg::InitializeControls: 下拉框初始化完成");

		// 更新端口列表
		WriteDebugLog("[DEBUG] PortMasterDlg::InitializeControls: 开始更新端口列表");
		UpdatePortList();
		WriteDebugLog("[DEBUG] PortMasterDlg::InitializeControls: 端口列表更新完成");
	
		// 更新按钮状态
		WriteDebugLog("[DEBUG] PortMasterDlg::InitializeControls: 开始更新按钮状态");
		UpdateButtonStates();
		WriteDebugLog("[DEBUG] PortMasterDlg::InitializeControls: 按钮状态更新完成");

		// 设置文件拖放区域提示文本
		// m_ctrlFileDropZone.SetWindowText(L"拖拽文件到此处加载(不自动传输)");  // 控件不存在

		// 初始化状态显示
		m_ctrlConnectionStatus.SetWindowText(L"未连接");
		m_ctrlProtocolStatus.SetWindowText(L"空闲");
		m_ctrlTransferStatus.SetWindowText(L"就绪");
		WriteDebugLog("[DEBUG] PortMasterDlg::InitializeControls: 设置状态显示完成");
		
		// 设置等宽字体用于十六进制显示
		static CFont monoFont;
		monoFont.CreateFont(
			-12,                    // 字体高度
			0,                      // 字体宽度（自动）
			0,                      // 倾斜角度
			0,                      // 基线倾斜角度
			FW_NORMAL,             // 字体粗细
			FALSE,                 // 是否斜体
			FALSE,                 // 是否下划线
			0,                     // 是否删除线
			ANSI_CHARSET,          // 字符集
			OUT_DEFAULT_PRECIS,    // 输出精度
			CLIP_DEFAULT_PRECIS,   // 裁剪精度
			CLEARTYPE_QUALITY,     // 输出质量
			FIXED_PITCH | FF_MODERN, // 字体间距和系列
			_T("Consolas")         // 字体名称，备选：Courier New
		);
		m_ctrlHexView.SetFont(&monoFont);
		m_ctrlInputHex.SetFont(&monoFont);
		WriteDebugLog("[DEBUG] PortMasterDlg::InitializeControls: 等宽字体设置完成");
		
		// 添加初始化日志
		AppendLog(L"PortMaster 初始化完成");
		AppendLog(L"现代化界面已启用");
		WriteDebugLog("[DEBUG] PortMasterDlg::InitializeControls: 控件初始化完成");
	}
	catch (...) {
		WriteDebugLog("[ERROR] PortMasterDlg::InitializeControls: 控件初始化异常");
		throw;
	}
}

void CPortMasterDlg::InitializeTransportObjects()
{
	WriteDebugLog("[DEBUG] CPortMasterDlg::InitializeTransportObjects: 开始初始化传输对象");
	
	// 初始化传输层和可靠通道
	m_transport = std::make_shared<LoopbackTransport>();
	m_reliableChannel = std::make_shared<ReliableChannel>(m_transport);
	
	// 设置可靠通道回调 - 现在控件已经正确绑定，可以安全访问
	m_reliableChannel->SetProgressCallback([this](const TransferStats& stats) {
		// 更新进度显示
		if (stats.totalBytes > 0)
		{
			int progress = static_cast<int>((stats.transferredBytes * 100) / stats.totalBytes);
			if (IsWindow(m_ctrlProgress.GetSafeHwnd())) {
				m_ctrlProgress.SetPos(progress);
			}
			
			if (IsWindow(m_ctrlTransferStatus.GetSafeHwnd())) {
				CString statusText;
				statusText.Format(L"传输中 (%.1f%%)", stats.GetProgress() * 100);
				m_ctrlTransferStatus.SetWindowText(statusText);
			}
		}
	});
	
	m_reliableChannel->SetCompletionCallback([this](bool success, const std::string& message) {
		// 传输完成回调
		CString msg = CA2W(message.c_str(), CP_UTF8);
		AppendLog(msg);
		
		if (success)
		{
			if (IsWindow(m_ctrlProgress.GetSafeHwnd())) {
				m_ctrlProgress.SetPos(0);
			}
			if (IsWindow(m_ctrlTransferStatus.GetSafeHwnd())) {
				m_ctrlTransferStatus.SetWindowText(L"传输完成");
			}
		}
		else
		{
			if (IsWindow(m_ctrlTransferStatus.GetSafeHwnd())) {
				m_ctrlTransferStatus.SetWindowText(L"传输失败");
			}
		}
		
		m_bTransmitting = false;
	});
	
	m_reliableChannel->SetFileReceivedCallback([this](const std::string& filename, const std::vector<uint8_t>& data) {
		// 文件接收完成回调
		CString filenameW = CA2W(filename.c_str(), CP_UTF8);
		if (filename == "[数据传输]")
		{
			AppendLogWithDetails(L"可靠传输完成", data.size());
		}
		else
		{
			CString msg;
			msg.Format(L"接收到文件: %s", filenameW.GetString());
			AppendLogWithDetails(msg, data.size());
		}
		
		// 在数据视图中显示接收到的内容
		DisplayReceivedData(data);
	});
	
	WriteDebugLog("[DEBUG] CPortMasterDlg::InitializeTransportObjects: 传输对象初始化完成");
}

void CPortMasterDlg::UpdatePortList()
{
	m_ctrlPortList.ResetContent();
	
	int portType = m_ctrlPortType.GetCurSel();
	switch (portType)
	{
	case 0: // 串口
		// 枚举串口 - 简单示例
		for (int i = 1; i <= 16; i++)
		{
			CString portName;
			portName.Format(L"COM%d", i);
			m_ctrlPortList.AddString(portName);
		}
		break;
	case 1: // 并口
		m_ctrlPortList.AddString(L"LPT1");
		m_ctrlPortList.AddString(L"LPT2");
		break;
	case 2: // USB打印机
		m_ctrlPortList.AddString(L"USB打印机1");
		break;
	case 3: // TCP客户端
		m_ctrlPortList.AddString(L"127.0.0.1:8080");
		break;
	case 4: // TCP服务端
		m_ctrlPortList.AddString(L"监听端口:8080");
		break;
	case 5: // UDP
		m_ctrlPortList.AddString(L"UDP:8080");
		break;
	case 6: // 本地回环
		m_ctrlPortList.AddString(L"本地回环");
		break;
	}
	
	if (m_ctrlPortList.GetCount() > 0)
		m_ctrlPortList.SetCurSel(0);
}

void CPortMasterDlg::UpdateButtonStates()
{
	// 添加控件句柄安全检查
	if (!IsWindow(m_ctrlConnectBtn.GetSafeHwnd()) || !IsWindow(m_ctrlDisconnectBtn.GetSafeHwnd()))
	{
		WriteDebugLog("[WARNING] UpdateButtonStates: 控件句柄未初始化，跳过更新");
		return;
	}
	
	// 更新在DoDataExchange中实际绑定的控件
	m_ctrlConnectBtn.EnableWindow(!m_bConnected);
	m_ctrlDisconnectBtn.EnableWindow(m_bConnected);
	
	// 改进的发送按钮状态管理
	bool hasSendableData = HasValidInputData();
	if (IsWindow(m_ctrlSendBtn.GetSafeHwnd()))
	{
		bool enableSend = m_bConnected && !m_bTransmitting && hasSendableData;
		m_ctrlSendBtn.EnableWindow(enableSend);
		
		// 根据状态设置按钮文本
		if (m_bTransmitting)
			m_ctrlSendBtn.SetWindowText(L"发送中...");
		else
			m_ctrlSendBtn.SetWindowText(L"发送");
	}
	
	// 文件操作按钮状态管理
	if (IsWindow(m_ctrlLoadFileBtn.GetSafeHwnd()))
		m_ctrlLoadFileBtn.EnableWindow(!m_bTransmitting);
	if (IsWindow(m_ctrlSaveFileBtn.GetSafeHwnd()))
	{
		bool hasDisplayData = !m_displayedData.empty();
		m_ctrlSaveFileBtn.EnableWindow(hasDisplayData);
	}
	
	// 清除按钮始终可用 - 使用实际绑定的控件
	if (IsWindow(m_ctrlClearInputBtn.GetSafeHwnd()))
		m_ctrlClearInputBtn.EnableWindow(TRUE);
	if (IsWindow(m_ctrlClearDisplayBtn.GetSafeHwnd()))
		m_ctrlClearDisplayBtn.EnableWindow(TRUE);
	
	// 更新连接状态显示（带状态指示器）
	if (IsWindow(m_ctrlConnectionStatus.GetSafeHwnd()))
	{
		CString statusText;
		if (m_bTransmitting)
			statusText = L"● 传输中";
		else if (m_bConnected)
			statusText = L"● 已连接";
		else
			statusText = L"○ 未连接";
		
		m_ctrlConnectionStatus.SetWindowText(statusText);
	}
	
	// 更新协议状态显示
	if (m_reliableChannel)
	{
		ReliableState state = m_reliableChannel->GetState();
		CString stateText;
		switch (state)
		{
		case RELIABLE_IDLE: stateText = L"空闲"; break;
		case RELIABLE_STARTING: stateText = L"开始传输"; break;
		case RELIABLE_SENDING: stateText = L"传输中"; break;
		case RELIABLE_ENDING: stateText = L"结束传输"; break;
		case RELIABLE_RECEIVING: stateText = L"接收中"; break;
		case RELIABLE_DONE: stateText = L"完成"; break;
		case RELIABLE_FAILED: stateText = L"失败"; break;
		default: stateText = L"未知"; break;
		}
		m_ctrlProtocolStatus.SetWindowText(stateText);
	}
	
	// 更新状态栏显示
	CString statusText;
	if (m_bTransmitting)
	{
		statusText = L"状态: 传输中";
	}
	else if (m_bConnected)
	{
		statusText = L"状态: 已连接";
		if (m_bReliableMode)
			statusText += L" (可靠模式)";
	}
	else
	{
		statusText = L"状态: 就绪";
	}
	m_ctrlTransferStatus.SetWindowText(statusText);
}

void CPortMasterDlg::AppendLog(const CString& message)
{
	CString timeStamp;
	SYSTEMTIME st;
	GetLocalTime(&st);
	timeStamp.Format(L"[%02d:%02d:%02d.%03d] ", st.wHour, st.wMinute, st.wSecond, st.wMilliseconds);
	
	CString log;
	m_ctrlLog.GetWindowText(log);
	log += timeStamp + message + L"\r\n";
	m_ctrlLog.SetWindowText(log);
	
	// TODO: 实现日志滚动功能（需要CEdit控件支持）
}

void CPortMasterDlg::AppendLogWithDetails(const CString& message, size_t bytes)
{
	CString detailedMessage = message;
	if (bytes > 0)
	{
		CString byteInfo;
		if (bytes >= 1024 * 1024)
		{
			byteInfo.Format(L" (%.2f MB)", bytes / (1024.0 * 1024.0));
		}
		else if (bytes >= 1024)
		{
			byteInfo.Format(L" (%.2f KB)", bytes / 1024.0);
		}
		else
		{
			byteInfo.Format(L" (%zu bytes)", bytes);
		}
		detailedMessage += byteInfo;
	}
	AppendLog(detailedMessage);
}

void CPortMasterDlg::UpdateTransferSpeed(size_t bytesTransferred)
{
	DWORD currentTime = GetTickCount();
	m_totalBytesTransmitted += bytesTransferred;
	
	// 每500ms更新一次速度显示
	if (currentTime - m_lastSpeedUpdateTime >= 500)
	{
		DWORD elapsedTime = currentTime - m_transmissionStartTime;
		if (elapsedTime > 0)
		{
			double speed = (m_totalBytesTransmitted * 1000.0) / elapsedTime;  // bytes/sec
			CString speedText;
			
			if (speed >= 1024 * 1024)
			{
				speedText.Format(L"速度: %.2f MB/s", speed / (1024.0 * 1024.0));
			}
			else if (speed >= 1024)
			{
				speedText.Format(L"速度: %.2f KB/s", speed / 1024.0);
			}
			else
			{
				speedText.Format(L"速度: %.0f B/s", speed);
			}
			
			if (IsWindow(m_ctrlTransferSpeed.GetSafeHwnd()))
			{
				m_ctrlTransferSpeed.SetWindowText(speedText);
			}
			
			// 估计剩余时间
			if (m_transmissionData.size() > m_transmissionProgress && speed > 0)
			{
				size_t remainingBytes = m_transmissionData.size() - m_transmissionProgress;
				double remainingSeconds = remainingBytes / speed;
				
				CString timeText;
				if (remainingSeconds >= 60)
				{
					timeText.Format(L"剩余: %.1f 分钟", remainingSeconds / 60.0);
				}
				else
				{
					timeText.Format(L"剩余: %.0f 秒", remainingSeconds);
				}
				
				// TODO: 显示剩余时间（需要添加对应的UI控件）
			}
			
			m_lastSpeedUpdateTime = currentTime;
		}
	}
	
	// 更新传输进度显示
	if (IsWindow(m_ctrlTransferProgress.GetSafeHwnd()) && !m_transmissionData.empty())
	{
		CString progressText;
		progressText.Format(L"已传输: %zu/%zu", m_transmissionProgress, m_transmissionData.size());
		m_ctrlTransferProgress.SetWindowText(progressText);
	}
}

void CPortMasterDlg::AppendHexData(const BYTE* data, size_t length, bool incoming)
{
	const size_t BYTES_PER_LINE = 8;  // 每行限制8字节
	CString prefix = incoming ? L"<< " : L">> ";
	
	CString currentHex;
	m_ctrlHexView.GetWindowText(currentHex);
	
	for (size_t i = 0; i < length; i += BYTES_PER_LINE)
	{
		CString hexLine;
		size_t lineLength = std::min(BYTES_PER_LINE, length - i);
		
		for (size_t j = 0; j < lineLength; j++)
		{
			CString temp;
			temp.Format(L"%02X ", data[i + j]);
			hexLine += temp;
		}
		
		currentHex += prefix + hexLine + L"\r\n";
	}
	
	m_ctrlHexView.SetWindowText(currentHex);
	
	// 滚动到底部
	m_ctrlHexView.LineScroll(m_ctrlHexView.GetLineCount());
}

void CPortMasterDlg::AppendTextData(const CString& text, bool incoming)
{
	CString prefix = incoming ? L"<< " : L">> ";
	
	CString currentText;
	m_ctrlTextView.GetWindowText(currentText);
	currentText += prefix + text + L"\r\n";
	m_ctrlTextView.SetWindowText(currentText);
	
	// 滚动到底部
	m_ctrlTextView.LineScroll(m_ctrlTextView.GetLineCount());
}

// 按钮事件处理
void CPortMasterDlg::OnBnClickedConnect()
{
	// SOLID-S: 单一职责 - 连接逻辑专门处理连接建立
	
	// 获取当前选择的传输类型
	int transportIndex = m_ctrlPortType.GetCurSel();
	if (transportIndex == CB_ERR)
	{
		AppendLog(L"请选择传输类型");
		return;
	}
	
	// 使用工厂模式创建传输实例 (SOLID-O: 开闭原则)
	std::shared_ptr<ITransport> newTransport = CreateTransportFromUI();
	if (!newTransport)
	{
		AppendLog(L"不支持的传输类型");
		return;
	}
	
	// 获取配置参数 (SOLID-S: 单一职责分离)
	TransportConfig config = GetTransportConfigFromUI();
	
	// 尝试打开传输连接
	if (!newTransport->Open(config))
	{
		std::string error = newTransport->GetLastError();
		CString statusMsg = GetConnectionStatusMessage(TRANSPORT_ERROR, error);
		
		// SOLID-S: 单一职责 - 提供针对性的错误建议
		CString detailedError = GetDetailedErrorSuggestion(transportIndex, error);
		AppendLog(L"连接失败: " + statusMsg);
		if (!detailedError.IsEmpty())
		{
			AppendLog(L"建议: " + detailedError);
		}
		
		// 更新连接状态显示
		if (IsWindow(m_ctrlConnectionStatus.GetSafeHwnd()))
		{
			m_ctrlConnectionStatus.SetWindowText(statusMsg);
		}
		return;
	}
	
	// 连接成功，更新传输对象和可靠通道
	m_transport = newTransport;
	m_reliableChannel = std::make_shared<ReliableChannel>(m_transport);
	
	// SOLID-S: 单一职责 - 配置协议参数 (DRY: 统一配置管理)
	ConfigureReliableChannelFromConfig();
	
	// 设置回调函数 (保持原有功能)
	m_reliableChannel->SetProgressCallback([this](const TransferStats& stats) {
		if (stats.totalBytes > 0)
		{
			int progress = static_cast<int>((stats.transferredBytes * 100) / stats.totalBytes);
			if (IsWindow(m_ctrlProgress.GetSafeHwnd())) {
				m_ctrlProgress.SetPos(progress);
			}
			
			CString statusText;
			statusText.Format(L"状态: 传输中 (%.1f%%, %zu/%zu 字节)", 
				stats.GetProgress() * 100, stats.transferredBytes, stats.totalBytes);
			if (IsWindow(m_ctrlTransferStatus.GetSafeHwnd())) {
				m_ctrlTransferStatus.SetWindowText(statusText);
			}
		}
	});
	
	m_reliableChannel->SetCompletionCallback([this](bool success, const std::string& message) {
		CString msg = CA2W(message.c_str(), CP_UTF8);
		if (success)
		{
			AppendLog(L"传输完成: " + msg);
			if (IsWindow(m_ctrlTransferStatus.GetSafeHwnd())) {
				m_ctrlTransferStatus.SetWindowText(L"就绪");
			}
			
			// 显示传输的数据（从发送缓冲区）
			if (!m_transmissionData.empty()) {
				DisplayReceivedData(m_transmissionData);
			}
		}
		else
		{
			AppendLog(L"传输失败: " + msg);
		}
		m_bTransmitting = false;
		UpdateButtonStates();
	});
	
	m_reliableChannel->SetFileReceivedCallback([this](const std::string& filename, const std::vector<uint8_t>& data) {
		CString filenameW = CA2W(filename.c_str(), CP_UTF8);
		CString msg;
		if (filename == "[数据传输]")
		{
			msg.Format(L"可靠传输完成 (%zu 字节)", data.size());
		}
		else
		{
			msg.Format(L"接收到文件: %s (%zu 字节)", filenameW.GetString(), data.size());
		}
		AppendLog(msg);
		DisplayReceivedData(data);
	});
	
	// 启用接收功能
	m_reliableChannel->EnableReceiving(true);
	
	if (m_reliableChannel && m_reliableChannel->Start())
	{
		m_bConnected = true;
		UpdateButtonStates();
		
		// 获取传输类型和端点信息用于显示 (DRY: 复用格式化函数)
		std::string transportTypeStr = m_transport->GetTransportType();
		std::string endpoint;
		
		// 重新获取配置信息 (KISS: 简化作用域管理)
		TransportConfig currentConfig = GetTransportConfigFromUI();
		
		// 获取端点信息 (SOLID-S: 单一职责 - 端点信息获取)
		if (transportTypeStr == "Serial")
		{
			endpoint = currentConfig.portName;
		}
		else if (transportTypeStr == "TCP" || transportTypeStr == "UDP")
		{
			// 获取实际的网络连接信息
			std::string actualEndpoint = GetNetworkConnectionInfo(transportTypeStr);
			endpoint = actualEndpoint.empty() ? (currentConfig.ipAddress + ":" + std::to_string(currentConfig.port)) : actualEndpoint;
		}
		else if (transportTypeStr == "LPT" || transportTypeStr == "USB")
		{
			endpoint = currentConfig.portName;
		}
		
		// 格式化连接信息
		CString transportInfo = FormatTransportInfo(transportTypeStr, endpoint);
		CString statusMsg = GetConnectionStatusMessage(TRANSPORT_OPEN);
		
		AppendLog(L"连接成功 - " + transportInfo);
		
		// 更新连接状态显示
		if (IsWindow(m_ctrlConnectionStatus.GetSafeHwnd()))
		{
			m_ctrlConnectionStatus.SetWindowText(statusMsg);
		}
	}
	else
	{
		std::string error = m_reliableChannel ? m_reliableChannel->GetLastError() : "可靠通道启动失败";
		CString statusMsg = GetConnectionStatusMessage(TRANSPORT_ERROR, error);
		AppendLog(L"可靠通道启动失败: " + statusMsg);
		
		// 更新连接状态显示
		if (IsWindow(m_ctrlConnectionStatus.GetSafeHwnd()))
		{
			m_ctrlConnectionStatus.SetWindowText(statusMsg);
		}
	}
}

void CPortMasterDlg::OnBnClickedDisconnect()
{
	if (m_reliableChannel)
	{
		m_reliableChannel->Stop();
	}
	
	m_bConnected = false;
	m_bTransmitting = false;
	UpdateButtonStates();
	AppendLog(L"已断开连接");
	
	// 更新状态显示
	if (IsWindow(m_ctrlConnectionStatus.GetSafeHwnd()))
	{
		m_ctrlConnectionStatus.SetWindowText(L"未连接");
	}
	if (IsWindow(m_ctrlProtocolStatus.GetSafeHwnd()))
	{
		m_ctrlProtocolStatus.SetWindowText(L"空闲");
	}
}

void CPortMasterDlg::OnBnClickedSend()
{
	// 优先检查是否有文件数据要发送
	std::vector<uint8_t> dataToSend;
	bool isFileTransmission = false;
	
	if (!m_transmissionData.empty())
	{
		// 有文件数据，发送文件
		dataToSend = m_transmissionData;
		isFileTransmission = true;
		AppendLog(L"发送文件数据");
	}
	else
	{
		// 获取输入框数据
		dataToSend = GetInputData();
		AppendLog(L"发送输入数据");
	}
	
	if (dataToSend.empty())
	{
		ShowUserMessage(L"没有数据可发送", L"请在十六进制或文本输入框中输入数据，或拖放文件", MB_ICONWARNING);
		return;
	}
	
	// 检查连接状态
	if (!m_bConnected)
	{
		ShowUserMessage(L"连接错误", L"请先连接端口才能发送数据", MB_ICONERROR);
		return;
	}
	
	// 第四阶段新增：传输控制功能 (SOLID-S: 单一职责 - 传输状态控制)
	if (m_bTransmitting)
	{
		// 正在传输中，提供停止传输选项
		int result = MessageBox(L"当前正在传输数据，是否要停止传输？", 
			L"传输控制", MB_YESNO | MB_ICONQUESTION);
		
		if (result == IDYES) {
			StopDataTransmission(false);
			AppendLog(L"用户手动停止传输");
		}
		return;
	}
	
	if (m_bReliableMode && m_reliableChannel)
	{
		// 使用可靠传输模式
		m_bTransmitting = true;
		if (isFileTransmission && !m_currentFileName.IsEmpty())
		{
			// 发送文件（带文件名）
			std::string fileNameStr = CT2A(m_currentFileName);
			if (m_reliableChannel->SendFile(fileNameStr, dataToSend))
			{
				AppendLog(L"开始可靠文件传输: " + m_currentFileName);
			}
			else
			{
				m_bTransmitting = false;
				AppendLog(L"可靠文件传输启动失败");
				CString error = CA2W(m_reliableChannel->GetLastError().c_str(), CP_UTF8);
				if (!error.IsEmpty())
				{
					AppendLog(L"错误: " + error);
				}
			}
		}
		else
		{
			// 发送数据
			if (m_reliableChannel->SendData(dataToSend))
			{
				AppendLog(L"开始可靠传输");
			}
			else
			{
				m_bTransmitting = false;
				AppendLog(L"可靠传输启动失败");
				CString error = CA2W(m_reliableChannel->GetLastError().c_str(), CP_UTF8);
				if (!error.IsEmpty())
				{
					AppendLog(L"错误: " + error);
				}
			}
		}
	}
	else
	{
		// 使用普通传输模式（模拟）
		StartDataTransmission(dataToSend);
	}
}

void CPortMasterDlg::OnBnClickedClear()
{
	// 这个是"清除显示"按钮，只清除显示区域
	m_ctrlHexView.SetWindowText(L"");
	m_ctrlTextView.SetWindowText(L"");
	
	
	AppendLog(L"显示区域已清空");
}



void CPortMasterDlg::OnCbnSelchangePortType()
{
	UpdatePortList();
	AppendLog(L"切换端口类型");
}

void CPortMasterDlg::OnBnClickedReliableMode()
{
	m_bReliableMode = (m_ctrlReliableMode.GetCheck() == BST_CHECKED);
	UpdateButtonStates();
	AppendLog(m_bReliableMode ? L"启用可靠传输模式" : L"禁用可靠传输模式");
}

void CPortMasterDlg::OnDropFiles(HDROP hDropInfo)
{
	WriteDebugLog("[DEBUG] OnDropFiles: 接收到文件拖放事件");
	
	try 
	{
		UINT fileCount = DragQueryFile(hDropInfo, 0xFFFFFFFF, NULL, 0);
		
		if (fileCount == 0)
		{
			ShowUserMessage(L"拖放失败", L"未检测到有效文件", MB_ICONWARNING);
			WriteDebugLog("[WARNING] OnDropFiles: 未检测到有效文件");
			return;
		}
		
		// 多文件拖放处理
		if (fileCount > 1)
		{
			CString message;
			message.Format(L"检测到 %u 个文件，只能处理第一个文件。\n请一次只拖放一个文件。", fileCount);
			ShowUserMessage(L"多文件拖放", message, MB_ICONINFORMATION);
		}
		
		// 处理第一个文件
		TCHAR filePath[MAX_PATH];
		UINT pathLength = DragQueryFile(hDropInfo, 0, filePath, MAX_PATH);
		
		if (pathLength == 0)
		{
			ShowUserMessage(L"拖放错误", L"无法获取文件路径", MB_ICONERROR);
			WriteDebugLog("[ERROR] OnDropFiles: DragQueryFile 返回路径长度为0");
			return;
		}
		
		// 显示拖放的文件路径
		CString fileName = PathFindFileName(filePath);
		CString message;
		message.Format(L"正在处理文件: %s", fileName);
		AppendLog(message);
		
		// 检查文件是否存在
		DWORD attributes = GetFileAttributes(filePath);
		if (attributes == INVALID_FILE_ATTRIBUTES)
		{
			message.Format(L"文件不存在或无法访问:\n%s", filePath);
			ShowUserMessage(L"文件访问错误", message, MB_ICONERROR);
			WriteDebugLog(CT2A(message));
			return;
		}
		
		// 检查是否为目录
		if (attributes & FILE_ATTRIBUTE_DIRECTORY)
		{
			ShowUserMessage(L"目录拖放", L"暂不支持目录拖放，请选择具体文件进行传输", MB_ICONWARNING);
			WriteDebugLog("[INFO] OnDropFiles: 跳过目录拖放");
			return;
		}
		
		// 获取文件大小并显示
		HANDLE hFile = CreateFile(filePath, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
		if (hFile != INVALID_HANDLE_VALUE)
		{
			LARGE_INTEGER fileSize;
			if (GetFileSizeEx(hFile, &fileSize))
			{
				CString sizeMessage;
				if (fileSize.QuadPart < 1024)
					sizeMessage.Format(L"文件大小: %I64d 字节", fileSize.QuadPart);
				else if (fileSize.QuadPart < 1024 * 1024)
					sizeMessage.Format(L"文件大小: %.2f KB", fileSize.QuadPart / 1024.0);
				else
					sizeMessage.Format(L"文件大小: %.2f MB", fileSize.QuadPart / (1024.0 * 1024.0));
				
				AppendLog(sizeMessage);
				UpdateDataSourceDisplay(L"文件: " + fileName);
			}
			CloseHandle(hFile);
		}
		
		// 读取文件内容
		WriteDebugLog("[INFO] OnDropFiles: 开始加载文件内容");
		if (LoadFileForTransmission(filePath))
		{
			ShowUserMessage(L"文件加载成功", 
				L"文件已加载并准备传输。\n可以在下方查看文件内容预览，\n点击发送按钮开始传输。", 
				MB_ICONINFORMATION);
			
			// 更新按钮状态
			UpdateButtonStates();
			WriteDebugLog("[SUCCESS] OnDropFiles: 文件加载成功");
		}
		else
		{
			ShowUserMessage(L"文件加载失败", L"无法读取文件内容，请检查文件是否损坏或权限不足", MB_ICONERROR);
			WriteDebugLog("[ERROR] OnDropFiles: 文件加载失败");
		}
	}
	catch (...)
	{
		ShowUserMessage(L"拖放异常", L"文件拖放处理过程中发生异常", MB_ICONERROR);
		WriteDebugLog("[ERROR] OnDropFiles: 处理拖放文件时发生异常");
	}
	
	DragFinish(hDropInfo);
	CDialogEx::OnDropFiles(hDropInfo);
	WriteDebugLog("[DEBUG] OnDropFiles: 文件拖放事件处理完成");
}

// SOLID-S: 单一职责 - 专门负责获取详细错误建议
CString CPortMasterDlg::GetDetailedErrorSuggestion(int transportIndex, const std::string& error)
{
	// SOLID-S: 单一职责 - 使用静态映射避免UI依赖 (YAGNI: 仅实现必要的传输类型)
	static const wchar_t* transportTypes[] = {
		L"串口", L"TCP客户端", L"TCP服务器", L"UDP", L"并口", L"USB打印机", L"回环测试"
	};
	
	CString transportType = L"";
	if (transportIndex >= 0 && transportIndex < _countof(transportTypes))
	{
		transportType = transportTypes[transportIndex];
	}
	
	CString errorMsg = CA2W(error.c_str(), CP_UTF8);
	errorMsg.MakeLower();
	
	// 串口相关错误建议
	if (transportType == L"串口")
	{
		if (errorMsg.Find(L"access") != -1 || errorMsg.Find(L"占用") != -1)
		{
			return L"串口被其他程序占用，请关闭相关程序后重试";
		}
		else if (errorMsg.Find(L"find") != -1 || errorMsg.Find(L"exist") != -1)
		{
			return L"串口不存在，请检查设备连接并刷新端口列表";
		}
		else if (errorMsg.Find(L"parameter") != -1 || errorMsg.Find(L"baud") != -1)
		{
			return L"串口参数配置错误，请检查波特率、数据位等设置";
		}
		return L"请检查串口连接、权限和参数配置";
	}
	// 网络相关错误建议
	else if (transportType == L"TCP客户端" || transportType == L"TCP服务器")
	{
		if (errorMsg.Find(L"connect") != -1 || errorMsg.Find(L"connection") != -1)
		{
			return L"无法建立TCP连接，请检查IP地址、端口号和网络状况";
		}
		else if (errorMsg.Find(L"bind") != -1 || errorMsg.Find(L"address") != -1)
		{
			return L"TCP端口绑定失败，请检查端口是否被占用或更换端口";
		}
		else if (errorMsg.Find(L"timeout") != -1)
		{
			return L"连接超时，请检查网络连通性和防火墙设置";
		}
		return L"请检查网络配置、防火墙设置和目标设备状态";
	}
	else if (transportType == L"UDP")
	{
		if (errorMsg.Find(L"bind") != -1)
		{
			return L"UDP端口绑定失败，请更换端口或检查权限";
		}
		else if (errorMsg.Find(L"address") != -1)
		{
			return L"UDP地址配置错误，请检查IP地址和端口设置";
		}
		return L"请检查UDP端口配置和网络权限";
	}
	// 打印机相关错误建议
	else if (transportType == L"并口" || transportType == L"USB打印机")
	{
		if (errorMsg.Find(L"printer") != -1 || errorMsg.Find(L"打印") != -1)
		{
			return L"打印机不可用，请检查设备连接和驱动安装";
		}
		else if (errorMsg.Find(L"access") != -1 || errorMsg.Find(L"permission") != -1)
		{
			return L"打印机访问权限不足，请以管理员身份运行程序";
		}
		return L"请检查打印机连接、权限和驱动程序";
	}
	// 回环测试
	else if (transportType == L"回环测试")
	{
		return L"回环测试失败，请检查程序配置和系统资源";
	}
	
	// 通用建议
	return L"请检查设备连接、权限设置和配置参数";
}

// SOLID-S: 单一职责 - 专门负责接收目录的设置和创建
void CPortMasterDlg::SetupReceiveDirectory()
{
	if (!m_reliableChannel)
		return;
		
	// 从配置管理器获取接收目录 (DRY: 复用配置管理)
	ConfigManager config;
	ConfigManager::AppConfig appConfig = config.GetAppConfig();
	
	std::string receiveDir = appConfig.receiveDirectory;
	if (receiveDir.empty())
	{
		// 使用默认接收目录
		char localAppData[MAX_PATH];
		if (SHGetFolderPathA(NULL, CSIDL_LOCAL_APPDATA, NULL, 0, localAppData) == S_OK)
		{
			receiveDir = std::string(localAppData) + "\\PortIO\\Recv";
		}
		else
		{
			receiveDir = ".\\Recv";
		}
	}
	
	// 确保接收目录存在 (SOLID-S: 单一职责 - 目录管理)
	try
	{
		std::filesystem::path dirPath(receiveDir);
		if (!std::filesystem::exists(dirPath))
		{
			std::filesystem::create_directories(dirPath);
			CString dirMsg = CA2W(receiveDir.c_str(), CP_UTF8);
			AppendLog(L"已创建接收目录: " + dirMsg);
		}
		
		// 设置到可靠通道
		m_reliableChannel->SetReceiveDirectory(receiveDir);
		
		CString dirMsg = CA2W(receiveDir.c_str(), CP_UTF8);
		AppendLog(L"接收目录设置为: " + dirMsg);
	}
	catch (const std::exception& e)
	{
		CString errorMsg = CA2W(e.what(), CP_UTF8);
		AppendLog(L"创建接收目录失败: " + errorMsg);
		
		// 使用当前目录作为备用方案
		m_reliableChannel->SetReceiveDirectory(".");
		AppendLog(L"使用当前目录作为接收目录");
	}
}

// SOLID-S: 单一职责 - 专门负责获取网络连接详细信息
std::string CPortMasterDlg::GetNetworkConnectionInfo(const std::string& transportType)
{
	if (!m_transport)
		return "";
		
	std::string info;
	
	try
	{
		if (transportType == "TCP")
		{
			// 尝试转换为TCP传输获取详细连接信息
			auto tcpTransport = std::dynamic_pointer_cast<TcpTransport>(m_transport);
			if (tcpTransport)
			{
				std::string localEndpoint = tcpTransport->GetLocalEndpoint();
				std::string remoteEndpoint = tcpTransport->GetRemoteEndpoint();
				
				if (tcpTransport->IsServerMode())
				{
					if (!remoteEndpoint.empty())
					{
						info = "服务器(" + localEndpoint + ") ← 客户端(" + remoteEndpoint + ")";
					}
					else
					{
						info = "服务器(" + localEndpoint + ") - 等待连接";
					}
				}
				else
				{
					info = "客户端 → " + remoteEndpoint + " (本地:" + localEndpoint + ")";
				}
			}
		}
		else if (transportType == "UDP")
		{
			// 尝试转换为UDP传输获取详细连接信息
			auto udpTransport = std::dynamic_pointer_cast<UdpTransport>(m_transport);
			if (udpTransport)
			{
				std::string localEndpoint = udpTransport->GetLocalEndpoint();
				std::string remoteEndpoint = udpTransport->GetRemoteEndpoint();
				
				if (!remoteEndpoint.empty())
				{
					info = "UDP(" + localEndpoint + ") ↔ " + remoteEndpoint;
				}
				else
				{
					info = "UDP(" + localEndpoint + ") - 学习模式";
				}
			}
		}
	}
	catch (const std::exception&)
	{
		// 如果转换失败，返回空字符串使用默认显示
		return "";
	}
	
	return info;
}

// SOLID-S: 单一职责 - 传输工厂方法 (SOLID-O: 开闭原则)
std::shared_ptr<ITransport> CPortMasterDlg::CreateTransportFromUI()
{
	int transportIndex = m_ctrlPortType.GetCurSel();
	if (transportIndex == CB_ERR)
		return nullptr;

	// SOLID-O: 开闭原则 - 可扩展的传输类型工厂
	switch (transportIndex)
	{
	case 0: // 串口
		return std::make_shared<SerialTransport>();
		
	case 1: // 并口 
		return std::make_shared<LptSpoolerTransport>();
		
	case 2: // USB打印机
		return std::make_shared<UsbPrinterTransport>();
		
	case 3: // TCP客户端
		{
			auto tcp = std::make_shared<TcpTransport>();
			return tcp;
		}
		
	case 4: // TCP服务器
		{
			auto tcp = std::make_shared<TcpTransport>();
			return tcp;
		}
		
	case 5: // UDP
		return std::make_shared<UdpTransport>();
		
	case 6: // 回环测试
		return std::make_shared<LoopbackTransport>();
		
	default:
		return nullptr;
	}
}

// SOLID-S: 单一职责 - 配置参数采集 (DRY: 消除重复配置获取)
TransportConfig CPortMasterDlg::GetTransportConfigFromUI()
{
	TransportConfig config; // 使用默认构造函数提供的基础默认值
	
	int transportIndex = m_ctrlPortType.GetCurSel();
	
	// SOLID-S: 单一职责 - 分类型配置采集
	switch (transportIndex)
	{
	case 0: // 串口
		{
			// 端口名称
			CString portName;
			if (m_ctrlPortList.GetCurSel() != CB_ERR)
			{
				m_ctrlPortList.GetLBText(m_ctrlPortList.GetCurSel(), portName);
				config.portName = CT2A(portName);
			}
			
			// 波特率
			CString baudRateStr;
			if (m_ctrlBaudRate.GetCurSel() != CB_ERR)
			{
				m_ctrlBaudRate.GetLBText(m_ctrlBaudRate.GetCurSel(), baudRateStr);
				config.baudRate = _ttoi(baudRateStr);
			}
			
			// 数据位
			CString dataBitsStr;
			if (m_ctrlDataBits.GetCurSel() != CB_ERR)
			{
				m_ctrlDataBits.GetLBText(m_ctrlDataBits.GetCurSel(), dataBitsStr);
				config.dataBits = _ttoi(dataBitsStr);
			}
			
			// 校验位
			int parityIndex = m_ctrlParity.GetCurSel();
			if (parityIndex != CB_ERR)
			{
				config.parity = parityIndex; // 0=None, 1=Odd, 2=Even, 3=Mark, 4=Space
			}
			
			// 停止位
			int stopBitsIndex = m_ctrlStopBits.GetCurSel();
			if (stopBitsIndex != CB_ERR)
			{
				config.stopBits = (stopBitsIndex == 0) ? 1 : ((stopBitsIndex == 1) ? 2 : 2); // 1, 1.5->2, 2
			}
		}
		break;
		
	case 1: // 并口
	case 2: // USB打印机
		{
			// 获取打印机名称
			CString printerName;
			if (m_ctrlPortList.GetCurSel() != CB_ERR)
			{
				m_ctrlPortList.GetLBText(m_ctrlPortList.GetCurSel(), printerName);
				config.portName = CT2A(printerName);
			}
		}
		break;
		
	case 3: // TCP客户端
		{
			config.isServer = false;
			
			// 从端口列表中解析IP:端口
			CString endpoint;
			if (m_ctrlPortList.GetCurSel() != CB_ERR)
			{
				m_ctrlPortList.GetLBText(m_ctrlPortList.GetCurSel(), endpoint);
				
				// 解析 "127.0.0.1:8080" 格式
				int colonPos = endpoint.Find(':');
				if (colonPos != -1)
				{
					CString ipStr = endpoint.Left(colonPos);
					CString portStr = endpoint.Mid(colonPos + 1);
					
					config.ipAddress = CT2A(ipStr);
					config.port = _ttoi(portStr);
				}
				else
				{
					// 默认值
					config.ipAddress = "127.0.0.1";
					config.port = 8080;
				}
			}
		}
		break;
		
	case 4: // TCP服务器
		{
			config.isServer = true;
			
			// 从端口列表中解析端口
			CString endpoint;
			if (m_ctrlPortList.GetCurSel() != CB_ERR)
			{
				m_ctrlPortList.GetLBText(m_ctrlPortList.GetCurSel(), endpoint);
				
				// 解析 "监听端口:8080" 格式
				int colonPos = endpoint.Find(':');
				if (colonPos != -1)
				{
					CString portStr = endpoint.Mid(colonPos + 1);
					config.port = _ttoi(portStr);
				}
				else
				{
					config.port = 8080;
				}
			}
			
			// 服务器绑定到所有接口
			config.ipAddress = "0.0.0.0";
		}
		break;
		
	case 5: // UDP
		{
			// 从端口列表中解析端口
			CString endpoint;
			if (m_ctrlPortList.GetCurSel() != CB_ERR)
			{
				m_ctrlPortList.GetLBText(m_ctrlPortList.GetCurSel(), endpoint);
				
				// 解析 "UDP:8080" 格式
				int colonPos = endpoint.Find(':');
				if (colonPos != -1)
				{
					CString portStr = endpoint.Mid(colonPos + 1);
					config.port = _ttoi(portStr);
				}
				else
				{
					config.port = 8080;
				}
			}
			
			// UDP默认配置
			config.ipAddress = "127.0.0.1";
		}
		break;
		
	case 6: // 回环测试
		{
			// 回环测试使用默认配置
			config.portName = "loopback";
		}
		break;
	}
	
	return config;
}

// SOLID-S: 单一职责 - 从配置管理器设置可靠通道参数 (DRY: 统一配置管理)
void CPortMasterDlg::ConfigureReliableChannelFromConfig()
{
	if (!m_reliableChannel)
		return;
		
	try
	{
		// 从配置管理器获取协议配置 (DRY: 复用配置管理)
		ConfigManager config;
		ConfigManager::AppConfig appConfig = config.GetAppConfig();
		
		// 应用协议参数到可靠通道 (SOLID-S: 单一职责 - 参数配置)
		m_reliableChannel->SetAckTimeout(appConfig.ackTimeoutMs);
		m_reliableChannel->SetMaxRetries(appConfig.maxRetries);
		m_reliableChannel->SetMaxPayloadSize(appConfig.maxPayloadSize);
		
		// 设置接收目录 (KISS: 简化目录管理逻辑)
		std::string receiveDir = appConfig.receiveDirectory;
		if (receiveDir.empty())
		{
			// 使用默认接收目录
			char localAppData[MAX_PATH];
			if (SHGetFolderPathA(NULL, CSIDL_LOCAL_APPDATA, NULL, 0, localAppData) == S_OK)
			{
				receiveDir = std::string(localAppData) + "\\PortIO\\Recv";
			}
			else
			{
				receiveDir = ".\\Recv";
			}
		}
		
		// 确保接收目录存在 (SOLID-S: 单一职责 - 目录管理)
		std::filesystem::path dirPath(receiveDir);
		if (!std::filesystem::exists(dirPath))
		{
			std::filesystem::create_directories(dirPath);
			CString dirMsg = CA2W(receiveDir.c_str(), CP_UTF8);
			AppendLog(L"已创建接收目录: " + dirMsg);
		}
		
		// 设置到可靠通道
		m_reliableChannel->SetReceiveDirectory(receiveDir);
		
		// 记录配置应用日志
		CString protocolMsg;
		protocolMsg.Format(L"协议参数已配置: 超时=%dms, 重试=%d次, 负载=%zu字节", 
			appConfig.ackTimeoutMs, appConfig.maxRetries, appConfig.maxPayloadSize);
		AppendLog(protocolMsg);
		
		CString dirMsg = CA2W(receiveDir.c_str(), CP_UTF8);
		AppendLog(L"接收目录: " + dirMsg);
	}
	catch (const std::exception& e)
	{
		CString errorMsg = CA2W(e.what(), CP_UTF8);
		AppendLog(L"配置协议参数失败: " + errorMsg);
		
		// 使用默认参数作为备用方案 (SOLID-I: 接口隔离 - 不依赖外部配置)
		m_reliableChannel->SetAckTimeout(1000);
		m_reliableChannel->SetMaxRetries(3);
		m_reliableChannel->SetMaxPayloadSize(1024);
		m_reliableChannel->SetReceiveDirectory(".");
		
		AppendLog(L"已使用默认协议参数");
	}
}

// SOLID-S: 单一职责 - 用户界面交互方法实现

CPortMasterDlg::~CPortMasterDlg()
{
	// 析构函数 - 清理资源
	if (m_transmissionTimer != 0)
	{
		KillTimer(m_transmissionTimer);
		m_transmissionTimer = 0;
	}
}

void CPortMasterDlg::OnBnClickedClearInput()
{
	m_ctrlInputHex.SetWindowText(L"");
	AppendLog(L"输入区域已清空");
}

void CPortMasterDlg::OnBnClickedClearDisplay()
{
	m_ctrlHexView.SetWindowText(L"");
	m_ctrlTextView.SetWindowText(L"");
	
	// 清空显示数据缓冲区 (SOLID-S: 单一职责)
	{
		std::lock_guard<std::mutex> lock(m_displayDataMutex);
		m_displayedData.clear();
	}
	
	AppendLog(L"显示区域已清空");
	UpdateButtonStates(); // 更新保存按钮状态
}

void CPortMasterDlg::OnBnClickedLoadFile()
{
	CFileDialog fileDlg(TRUE, nullptr, nullptr, 
		OFN_FILEMUSTEXIST | OFN_HIDEREADONLY,
		L"所有文件|*.*|文本文件|*.txt|二进制文件|*.bin|数据文件|*.dat||");
		
	if (fileDlg.DoModal() == IDOK)
	{
		CString filePath = fileDlg.GetPathName();
		if (LoadFileForTransmission(filePath))
		{
			ShowUserMessage(L"文件加载成功", L"文件已加载并准备传输", MB_ICONINFORMATION);
			UpdateButtonStates();
		}
		else
		{
			ShowUserMessage(L"文件加载失败", L"无法读取文件内容", MB_ICONERROR);
		}
	}
}

void CPortMasterDlg::OnBnClickedSaveFile()
{
	std::vector<uint8_t> dataToSave;
	{
		std::lock_guard<std::mutex> lock(m_displayDataMutex);
		dataToSave = m_displayedData;
	}
	
	if (dataToSave.empty())
	{
		ShowUserMessage(L"保存失败", L"没有数据可保存", MB_ICONWARNING);
		return;
	}
	
	CFileDialog fileDlg(FALSE, L"dat", L"ReceivedData",
		OFN_OVERWRITEPROMPT,
		L"数据文件|*.dat|二进制文件|*.bin|文本文件|*.txt|所有文件|*.*||");
		
	if (fileDlg.DoModal() == IDOK)
	{
		CString filePath = fileDlg.GetPathName();
		std::ofstream file(CT2A(filePath), std::ios::binary);
		
		if (file.is_open())
		{
			file.write(reinterpret_cast<const char*>(dataToSave.data()), dataToSave.size());
			file.close();
			
			CString msg;
			msg.Format(L"文件保存成功: %s (%zu 字节)", 
				PathFindFileName(filePath), dataToSave.size());
			AppendLog(msg);
			ShowUserMessage(L"保存成功", msg, MB_ICONINFORMATION);
		}
		else
		{
			ShowUserMessage(L"保存失败", L"无法创建文件", MB_ICONERROR);
		}
	}
}

void CPortMasterDlg::OnBnClickedCopyHex()
{
	CString hexText;
	m_ctrlHexView.GetWindowText(hexText);
	
	if (!hexText.IsEmpty())
	{
		if (OpenClipboard())
		{
			EmptyClipboard();
			size_t len = (hexText.GetLength() + 1) * sizeof(WCHAR);
			HGLOBAL hMem = GlobalAlloc(GMEM_MOVEABLE, len);
			
			if (hMem)
			{
				wcscpy_s((WCHAR*)GlobalLock(hMem), hexText.GetLength() + 1, hexText);
				GlobalUnlock(hMem);
				SetClipboardData(CF_UNICODETEXT, hMem);
				AppendLog(L"十六进制数据已复制到剪贴板");
			}
			CloseClipboard();
		}
	}
	else
	{
		ShowUserMessage(L"复制失败", L"没有十六进制数据可复制", MB_ICONWARNING);
	}
}

void CPortMasterDlg::OnBnClickedCopyText()
{
	CString textData;
	m_ctrlTextView.GetWindowText(textData);
	
	if (!textData.IsEmpty())
	{
		if (OpenClipboard())
		{
			EmptyClipboard();
			size_t len = (textData.GetLength() + 1) * sizeof(WCHAR);
			HGLOBAL hMem = GlobalAlloc(GMEM_MOVEABLE, len);
			
			if (hMem)
			{
				wcscpy_s((WCHAR*)GlobalLock(hMem), textData.GetLength() + 1, textData);
				GlobalUnlock(hMem);
				SetClipboardData(CF_UNICODETEXT, hMem);
				AppendLog(L"文本数据已复制到剪贴板");
			}
			CloseClipboard();
		}
	}
	else
	{
		ShowUserMessage(L"复制失败", L"没有文本数据可复制", MB_ICONWARNING);
	}
}

void CPortMasterDlg::OnTimer(UINT_PTR nIDEvent)
{
	if (nIDEvent == AppConstants::TRANSMISSION_TIMER_ID)
	{
		OnChunkTransmissionTimer();
	}
	CDialogEx::OnTimer(nIDEvent);
}

void CPortMasterDlg::DisplayReceivedData(const std::vector<uint8_t>& data)
{
	if (data.empty())
		return;
		
	// 更新显示数据缓冲区 (SOLID-S: 单一职责 - 数据管理)
	{
		std::lock_guard<std::mutex> lock(m_displayDataMutex);
		m_displayedData = data; // 替换而不是追加
	}
	
	// 更新十六进制视图
	CString hexDisplay = FormatHexDisplay(data);
	m_ctrlHexView.SetWindowText(hexDisplay);
	
	// 更新文本视图
	CString textDisplay = FormatTextDisplay(data);
	m_ctrlTextView.SetWindowText(textDisplay);
	
	// 滚动到底部
	ScrollToBottom();
	
	// 更新按钮状态
	UpdateButtonStates();
}

bool CPortMasterDlg::HasValidInputData()
{
	CString inputText;
	m_ctrlInputHex.GetWindowText(inputText);
	
	// 检查输入框是否有数据或者文件传输数据是否存在
	return (!inputText.IsEmpty() || !m_transmissionData.empty());
}

CString CPortMasterDlg::GetConnectionStatusMessage(TransportState state, const std::string& error)
{
	switch (state)
	{
	case TRANSPORT_CLOSED:
		return L"未连接";
	case TRANSPORT_OPENING:
		return L"连接中...";
	case TRANSPORT_OPEN:
		return L"已连接";
	case TRANSPORT_CLOSING:
		return L"断开中...";
	case TRANSPORT_ERROR:
		{
			if (error.empty())
				return L"连接错误";
			CString errorMsg = CA2W(error.c_str(), CP_UTF8);
			return L"错误: " + errorMsg;
		}
	default:
		return L"未知状态";
	}
}

CString CPortMasterDlg::FormatTransportInfo(const std::string& transportType, const std::string& endpoint)
{
	CString typeMsg = CA2W(transportType.c_str(), CP_UTF8);
	
	if (endpoint.empty())
	{
		return typeMsg + L" 连接";
	}
	else
	{
		CString endpointMsg = CA2W(endpoint.c_str(), CP_UTF8);
		return typeMsg + L" (" + endpointMsg + L")";
	}
}

std::vector<uint8_t> CPortMasterDlg::GetInputData()
{
	CString inputText;
	m_ctrlInputHex.GetWindowText(inputText);
	
	if (inputText.IsEmpty())
		return std::vector<uint8_t>();
		
	// 检查是否为十六进制格式
	if (IsHexFormatInput(inputText))
	{
		return ProcessHexInput(inputText);
	}
	else
	{
		return ProcessTextInput(inputText);
	}
}

void CPortMasterDlg::ShowUserMessage(const CString& title, const CString& message, UINT type)
{
	MessageBox(message, title, type);
}

void CPortMasterDlg::StartDataTransmission(const std::vector<uint8_t>& data)
{
	// 第四阶段重构：实现真实的数据分块传输 (SOLID-S: 单一职责 - 分块传输管理)
	if (data.empty()) {
		AppendLog(L"错误：数据为空，无法启动传输");
		return;
	}
	
	// 设置传输状态
	m_bTransmitting = true;
	
	// 初始化传输参数
	m_chunkTransmissionData = data;
	m_chunkTransmissionIndex = 0;
	m_chunkSize = 256; // 每次传输256字节 (KISS: 使用固定大小简化逻辑)
	
	// 记录传输开始时间
	m_transmissionStartTime = GetTickCount();
	m_totalBytesTransmitted = 0;
	m_lastSpeedUpdateTime = m_transmissionStartTime;
	
	// 更新UI状态 (SOLID-S: 单一职责 - UI状态管理)
	UpdateButtonStates();
	
	// 设置进度条
	if (::IsWindow(m_ctrlProgress.m_hWnd)) {
		m_ctrlProgress.SetRange(0, static_cast<int>(data.size()));
		m_ctrlProgress.SetPos(0);
	}
	
	// 日志记录
	CString logMsg;
	logMsg.Format(L"开始分块传输 - 总大小: %zu 字节, 块大小: %zu 字节", 
		data.size(), m_chunkSize);
	AppendLog(logMsg);
	
	// 启动传输定时器 (使用现有常量)
	m_transmissionTimer = SetTimer(AppConstants::TRANSMISSION_TIMER_ID, 
		AppConstants::TRANSMISSION_TIMER_INTERVAL, NULL);
	
	if (m_transmissionTimer == 0) {
		// 定时器启动失败
		m_bTransmitting = false;
		UpdateButtonStates();
		AppendLog(L"错误：无法启动传输定时器");
		return;
	}
	
	AppendLog(L"传输定时器已启动，开始分块传输");
}

void CPortMasterDlg::UpdateDataSourceDisplay(const CString& source)
{
	// 更新数据源显示标签（如果存在）
	if (IsWindow(m_ctrlDataSourceLabel.GetSafeHwnd()))
	{
		m_ctrlDataSourceLabel.SetWindowText(L"数据源: " + source);
	}
	
	AppendLog(L"数据源: " + source);
}

bool CPortMasterDlg::LoadFileForTransmission(const CString& filePath)
{
	try
	{
		std::ifstream file(CT2A(filePath), std::ios::binary | std::ios::ate);
		if (!file.is_open())
			return false;
			
		size_t fileSize = file.tellg();
		if (fileSize == 0)
		{
			file.close();
			return false;
		}
		
		// 检查文件大小限制 (SOLID-S: 单一职责 - 资源管理)
		if (fileSize > AppConstants::MAX_FILE_SIZE)
		{
			file.close();
			CString sizeMsg;
			sizeMsg.Format(L"文件过大 (%.2f MB)，最大支持 %.2f MB", 
				fileSize * AppConstants::GetBytesToMegabytes(),
				AppConstants::MAX_FILE_SIZE * AppConstants::GetBytesToMegabytes());
			ShowUserMessage(L"文件过大", sizeMsg, MB_ICONWARNING);
			return false;
		}
		
		file.seekg(0, std::ios::beg);
		
		m_transmissionData.resize(fileSize);
		file.read(reinterpret_cast<char*>(m_transmissionData.data()), fileSize);
		file.close();
		
		// 设置文件名
		m_currentFileName = PathFindFileName(filePath);
		
		// 显示文件内容预览
		DisplayReceivedData(m_transmissionData);
		
		CString msg;
		msg.Format(L"已加载文件: %s (%zu 字节)", 
			PathFindFileName(filePath), fileSize);
		AppendLog(msg);
		UpdateDataSourceDisplay(L"文件: " + CString(PathFindFileName(filePath)));
		
		return true;
	}
	catch (...)
	{
		return false;
	}
}

// SOLID-S: 单一职责 - 数据格式处理辅助方法

bool CPortMasterDlg::IsHexFormatInput(const CString& input)
{
	// 检查是否包含十六进制字符
	for (int i = 0; i < input.GetLength(); i++)
	{
		WCHAR ch = input[i];
		if (!iswspace(ch) && !iswxdigit(ch))
			return false;
	}
	return true;
}

std::vector<uint8_t> CPortMasterDlg::ProcessHexInput(const CString& hexInput)
{
	std::vector<uint8_t> data;
	CString cleanHex = hexInput;
	cleanHex.Replace(L" ", L"");
	cleanHex.Replace(L"\t", L"");
	cleanHex.Replace(L"\r", L"");
	cleanHex.Replace(L"\n", L"");
	
	for (int i = 0; i < cleanHex.GetLength(); i += 2)
	{
		if (i + 1 < cleanHex.GetLength())
		{
			CString byteStr = cleanHex.Mid(i, 2);
			uint8_t byte = (uint8_t)wcstoul(byteStr, nullptr, 16);
			data.push_back(byte);
		}
	}
	
	return data;
}

std::vector<uint8_t> CPortMasterDlg::ProcessTextInput(const CString& textInput)
{
	std::string utf8Text = CT2A(textInput, CP_UTF8);
	return std::vector<uint8_t>(utf8Text.begin(), utf8Text.end());
}

CString CPortMasterDlg::FormatHexDisplay(const std::vector<uint8_t>& data)
{
	const size_t BYTES_PER_LINE = 16;
	CString result;
	
	for (size_t i = 0; i < data.size(); i += BYTES_PER_LINE)
	{
		// 地址
		CString line;
		line.Format(L"%08X: ", (unsigned int)i);
		
		// 十六进制数据
		for (size_t j = 0; j < BYTES_PER_LINE && (i + j) < data.size(); j++)
		{
			CString byteStr;
			byteStr.Format(L"%02X ", data[i + j]);
			line += byteStr;
		}
		
		// 填充对齐
		size_t actualBytes = std::min(BYTES_PER_LINE, data.size() - i);
		for (size_t j = actualBytes; j < BYTES_PER_LINE; j++)
		{
			line += L"   ";
		}
		
		line += L" |";
		
		// ASCII字符
		for (size_t j = 0; j < BYTES_PER_LINE && (i + j) < data.size(); j++)
		{
			uint8_t byte = data[i + j];
			if (byte >= 32 && byte <= 126)
				line += (WCHAR)byte;
			else
				line += L'.';
		}
		
		line += L"|";
		result += line + L"\r\n";
	}
	
	return result;
}

CString CPortMasterDlg::FormatTextDisplay(const std::vector<uint8_t>& data)
{
	if (data.empty())
		return L"";
		
	// 尝试将数据转换为UTF-8文本
	std::string utf8Text(data.begin(), data.end());
	// 使用 MultiByteToWideChar 进行 UTF-8 到 UTF-16 转换，避免不安全的临时对象转换告警
	const char* src = utf8Text.c_str();
	int srcLen = static_cast<int>(utf8Text.size());
	int wlen = MultiByteToWideChar(CP_UTF8, 0, src, srcLen, NULL, 0);
	if (wlen <= 0)
	{
		return L"";
	}
	CString result;
	LPWSTR buf = result.GetBuffer(wlen);
	int written = MultiByteToWideChar(CP_UTF8, 0, src, srcLen, buf, wlen);
	result.ReleaseBuffer((written > 0) ? written : 0);
	return result;
}

void CPortMasterDlg::ScrollToBottom()
{
	// 滚动十六进制视图到底部
	int hexLines = m_ctrlHexView.GetLineCount();
	if (hexLines > 0)
	{
		m_ctrlHexView.LineScroll(hexLines);
	}
	
	// 滚动文本视图到底部
	int textLines = m_ctrlTextView.GetLineCount();
	if (textLines > 0)
	{
		m_ctrlTextView.LineScroll(textLines);
	}
}


// 第四阶段核心：分块传输定时器处理 (SOLID-S: 单一职责 - 分块数据传输)
void CPortMasterDlg::OnChunkTransmissionTimer()
{
	// 验证传输状态
	if (!m_bTransmitting || m_chunkTransmissionData.empty()) {
		return;
	}
	
	// 计算当前块的大小
	size_t remainingBytes = m_chunkTransmissionData.size() - m_chunkTransmissionIndex;
	size_t currentChunkSize = std::min(m_chunkSize, remainingBytes);
	
	if (currentChunkSize == 0) {
		// 传输已完成
		StopDataTransmission(true);
		return;
	}
	
	// 提取当前数据块
	std::vector<uint8_t> currentChunk(
		m_chunkTransmissionData.begin() + m_chunkTransmissionIndex,
		m_chunkTransmissionData.begin() + m_chunkTransmissionIndex + currentChunkSize
	);
	
	// 执行真实的数据传输 (SOLID-D: 依赖抽象 - 使用传输接口)
	bool transmissionSuccess = false;
	if (m_transport && m_transport->IsOpen()) {
		try {
			size_t written = m_transport->Write(currentChunk);
			transmissionSuccess = (written == currentChunk.size());
			
			if (transmissionSuccess) {
				// 更新传输进度
				m_chunkTransmissionIndex += currentChunkSize;
				m_totalBytesTransmitted += currentChunkSize;
				
				// 实时UI状态更新 (SOLID-S: 单一职责 - UI状态反馈)
				UpdateTransmissionProgress();
				
				// 显示传输的数据块到接收区域（用于回环测试模式）
				if (ShouldEchoTransmittedData()) {
					DisplayReceivedDataChunk(currentChunk);
				}
				
				// 调试日志
				CString debugMsg;
				debugMsg.Format(L"已发送数据块: %zu 字节, 进度: %.1f%%", 
					currentChunkSize, 
					(double)(m_chunkTransmissionIndex * 100) / m_chunkTransmissionData.size());
				AppendLog(debugMsg);
			}
			else {
				// 写入失败
				CString errorMsg;
				errorMsg.Format(L"数据块传输失败: 预期 %zu 字节, 实际 %zu 字节", 
					currentChunkSize, written);
				AppendLog(errorMsg);
				StopDataTransmission(false);
			}
		}
		catch (const std::exception& e) {
			CString errorMsg = CA2W(e.what(), CP_UTF8);
			AppendLog(L"传输异常: " + errorMsg);
			StopDataTransmission(false);
		}
	}
	else {
		AppendLog(L"错误：传输通道未开启，停止传输");
		StopDataTransmission(false);
	}
}

// 第四阶段新增：停止数据传输 (SOLID-S: 单一职责 - 传输状态管理)
void CPortMasterDlg::StopDataTransmission(bool completed)
{
	// 停止定时器
	if (m_transmissionTimer != 0) {
		KillTimer(m_transmissionTimer);
		m_transmissionTimer = 0;
	}
	
	// 清除传输状态
	m_bTransmitting = false;
	
	// 更新UI状态
	UpdateButtonStates();
	
	// 完成进度条
	if (::IsWindow(m_ctrlProgress.m_hWnd) && completed) {
		m_ctrlProgress.SetPos(static_cast<int>(m_chunkTransmissionData.size()));
	}
	
	// 记录传输结果
	if (completed) {
		DWORD elapsedTime = GetTickCount() - m_transmissionStartTime;
		double speed = (elapsedTime > 0) ? (double)(m_totalBytesTransmitted * 1000) / elapsedTime : 0;
		
		CString completionMsg;
		completionMsg.Format(L"分块传输完成 - 总计: %zu 字节, 耗时: %lu ms, 平均速度: %.1f B/s", 
			m_totalBytesTransmitted, elapsedTime, speed);
		AppendLog(completionMsg);
	}
	else {
		AppendLog(L"分块传输中断");
	}
	
	// 清理传输数据 (YAGNI: 及时释放不需要的资源)
	m_chunkTransmissionData.clear();
	m_chunkTransmissionIndex = 0;
}

// 第四阶段新增：实时UI进度更新 (SOLID-S: 单一职责 - 进度显示)
void CPortMasterDlg::UpdateTransmissionProgress()
{
	// 更新进度条
	if (::IsWindow(m_ctrlProgress.m_hWnd)) {
		m_ctrlProgress.SetPos(static_cast<int>(m_chunkTransmissionIndex));
	}
	
	// 更新传输速度显示
	DWORD currentTime = GetTickCount();
	if (currentTime > m_lastSpeedUpdateTime + 500) { // 每500ms更新一次速度显示
		DWORD elapsedTime = currentTime - m_transmissionStartTime;
		if (elapsedTime > 0) {
			double speed = (double)(m_totalBytesTransmitted * 1000) / elapsedTime;
			
			CString speedText;
			if (speed >= 1024) {
				speedText.Format(L"%.1f KB/s", speed / 1024.0);
			} else {
				speedText.Format(L"%.0f B/s", speed);
			}
			
			if (::IsWindow(m_ctrlTransferSpeed.m_hWnd)) {
				m_ctrlTransferSpeed.SetWindowText(speedText);
			}
		}
		m_lastSpeedUpdateTime = currentTime;
	}
	
	// 更新进度百分比显示
	double progressPercent = (double)(m_chunkTransmissionIndex * 100) / m_chunkTransmissionData.size();
	CString progressText;
	progressText.Format(L"%.1f%% (%zu/%zu)", progressPercent, 
		m_chunkTransmissionIndex, m_chunkTransmissionData.size());
	
	if (::IsWindow(m_ctrlTransferProgress.m_hWnd)) {
		m_ctrlTransferProgress.SetWindowText(progressText);
	}
}

// 第四阶段新增：判断是否应回显传输数据 (SOLID-S: 单一职责 - 回显策略)
bool CPortMasterDlg::ShouldEchoTransmittedData() const
{
	// 只有在回环测试模式下才回显数据
	int portType = m_ctrlPortType.GetCurSel();
	return (portType == 6); // 6 = 回环测试
}

// 第四阶段新增：显示传输数据块 (SOLID-S: 单一职责 - 分块数据显示)
void CPortMasterDlg::DisplayReceivedDataChunk(const std::vector<uint8_t>& chunk)
{
	if (chunk.empty()) return;
	
	// 追加显示模式 - 不替换已有数据
	CString hexDisplay = FormatHexDisplay(chunk);
	CString textDisplay = FormatTextDisplay(chunk);
	
	// 追加到十六进制视图
	CString currentHex;
	m_ctrlHexView.GetWindowText(currentHex);
	if (!currentHex.IsEmpty()) {
		currentHex += L"\r\n";
	}
	currentHex += hexDisplay;
	m_ctrlHexView.SetWindowText(currentHex);
	
	// 追加到文本视图
	CString currentText;
	m_ctrlTextView.GetWindowText(currentText);
	currentText += textDisplay;
	m_ctrlTextView.SetWindowText(currentText);
	
	// 滚动到底部
	ScrollToBottom();
}
