# PortMaster 项目代码重构与功能调整计划

**状态:** 已根据您的决策更新
**目标:** 将 PortMaster 项目精简为一个稳定、专注的内部开发辅助工具，并确保其核心传输功能的完整性。

---

### 第一部分：待移除的功能与代码

根据您的决策，以下功能将被视为“范围外”功能，建议从代码库中彻底移除，以降低复杂度和维护成本。

**1. 专用的可过滤日志窗口 (`CLogWindowDialog`)**
   - **决策:** 移除此高级功能。
   - **执行计划:** 从项目中删除 `LogWindowDialog.h` 和 `LogWindowDialog.cpp` 文件，并移除 `PortMasterDlg` 类中所有相关的调用代码和UI入口。

**2. 内置测试向导中的大部分测试用例**
   - **决策:** 移除未实现的测试，后续将进行手动测试。
   - **执行计划:** 修改 `TestWizardDialog.cpp`，在测试类型下拉框中仅保留“回环测试”和“可靠协议测试”，并移除其他所有未实现测试的UI入口和逻辑分支。

**3. 协议管理器中的高级功能 (加密、压缩等)**
   - **决策:** 移除这些对于内部工具而言过于复杂的功能。
   - **执行计划:** 编辑 `ProtocolManager.h` 和 `.cpp` 文件，删除 `EnableEncryption`, `EnableCompression`, `EnableMultiplexing` 等高级功能的接口声明和空实现。

---

### 第二部分：待实现和完善的核心功能

以下功能是项目的核心，必须完整实现，不能使用模拟或虚假操作。

**1. 非可靠模式下的数据分块传输 (高优先级)**
   - **决策:** 此功能是工具的核心，必须完整实现。
   - **当前状态:** 代码中存在分块传输的迹象（如定时器），但实际的直接发送逻辑是模拟的，并未真正分块。
   - **执行计划:** 
     1. 重构 `CPortMasterDlg::OnBnClickedSend` 函数的非可靠模式分支。
     2. 实现逻辑：将待发送的完整数据（来自输入框或文件）分割成预设大小的数据块。
     3. 使用定时器（如 `TRANSMISSION_TIMER_ID`）周期性地发送一小块数据。
     4. 在每次发送后，实时更新进度条、已发送字节数、传输速度等UI状态。
     5. 确保在传输完成或被用户停止时，能正确清理状态并停止定时器。

**2. Debug版本的文件日志记录**
   - **决策:** Debug版本的程序应在当前目录下生成日志文件。
   - **当前状态:** 项目中已存在 `WriteDebugLog` 函数，基本满足要求。
   - **执行计划:** 
     1. **确认逻辑:** 审查 `PortMaster.cpp` 中的 `WriteDebugLog` 和 `GetLogFilePath` 函数，确保其日志路径符合预期（当前实现会优先尝试配置目录、程序目录，最后是用户数据目录，这比直接写入当前目录更健壮，建议保留）。
     2. **编译宏隔离:** 确认 `WriteDebugLog` 的调用或其内部实现被 `#ifdef _DEBUG` ... `#endif` 宏包裹，确保Release版本无日志功能和性能开销。

---

### 第三部分：需要修复的底层问题

以下是在代码审计中发现的基础性问题，修复它们是保证项目稳定性的前提。

**1. 修复源代码中的硬编码乱码 (高优先级)**
   - **问题:** 原始代码中的部分中文字符（主要在注释中）由于编码问题已显示为乱码。即使统一了文件编码格式，这些错误的字符序列依然存在，不会自动恢复。
   - **执行计划:**
     1. **定位:** 全面排查项目中所有源文件（特别是 `ConfigManager.h`, `DataFormatter.h` 等），找出所有残留的乱码字符。
     2. **修正:** 手动将这些乱码注释和字符串恢复为正确的中文内容。例如，将 `// 閰嶇疆绠＄悊鍣?...` 修正为 `// 配置管理器...`。
     3. **验证:** 确保在新的UTF-8编码环境下，所有中文字符都能被正确编译和显示。

**2. 替换手动实现的JSON解析器 (高优先级)**
   - **问题:** `ConfigManager.cpp` 中手写的JSON解析器非常脆弱，容易因配置文件格式的微小变动而出错。
   - **执行计划:** 引入一个标准的第三方C++ JSON库（如 nlohmann/json）来代替当前的手动解析逻辑，增强程序加载和保存配置时的稳定性。

**3. 推广RAII模式进行资源管理 (中优先级)**
   - **问题:** 代码中部分地方使用了手动的WinAPI资源管理（如 `CreateFile`/`CloseHandle`），存在资源泄漏的风险。
   - **执行计划:** 推荐逐步将手动的资源管理替换为基于RAII的智能指针（如 `std::unique_ptr` 配合自定义Deleter），确保资源在任何情况下都能被正确释放。