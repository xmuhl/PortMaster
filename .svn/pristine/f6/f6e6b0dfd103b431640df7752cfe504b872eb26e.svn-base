#pragma once

#include "ITransport.h"
#include <winsock2.h>
#include <ws2tcpip.h>
#include <thread>
#include <atomic>
#include <mutex>

class UdpTransport : public ITransport
{
public:
    UdpTransport();
    virtual ~UdpTransport();

    // ITransport 鎺ュ彛瀹炵幇
    virtual bool Open(const TransportConfig& config) override;
    virtual void Close() override;
    virtual bool IsOpen() const override;
    virtual TransportState GetState() const override;

    virtual bool Configure(const TransportConfig& config) override;
    virtual TransportConfig GetConfiguration() const override;

    virtual size_t Write(const std::vector<uint8_t>& data) override;
    virtual size_t Write(const uint8_t* data, size_t length) override;
    virtual size_t Read(std::vector<uint8_t>& data, size_t maxLength = 0) override;
    virtual size_t Available() const override;

    virtual std::string GetLastError() const override;
    virtual std::string GetPortName() const override;
    virtual std::string GetTransportType() const override;

    virtual void SetDataReceivedCallback(DataReceivedCallback callback) override;
    virtual void SetStateChangedCallback(StateChangedCallback callback) override;

    virtual bool Flush() override;
    virtual bool ClearBuffers() override;

    // UDP 鐗规湁鍔熻兘
    bool SetRemoteEndpoint(const std::string& address, int port);
    std::string GetRemoteEndpoint() const;
    std::string GetLocalEndpoint() const;

private:
    SOCKET m_socket;
    sockaddr_in m_localAddr;
    sockaddr_in m_remoteAddr;
    bool m_hasRemoteAddr;
    
    // 璇诲彇绾跨▼
    std::thread m_readThread;
    std::atomic<bool> m_stopRead;
    mutable std::mutex m_mutex;
    std::vector<uint8_t> m_readBuffer;

    // 鍐呴儴鏂规硶
    bool InitializeWinsock();
    void CleanupWinsock();
    bool CreateSocket();
    void ReadThreadFunc();
    std::string GetSocketErrorString(int error) const;
    
    static bool s_wsaInitialized;
    static int s_wsaRefCount;
};