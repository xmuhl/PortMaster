#pragma once
#include <afxrich.h>

#include "afxdialogex.h"
#include "Common/DataFormatter.h"
#include "Protocol/ReliableChannel.h"
#include "Transport/LoopbackTransport.h"
#include <memory>

// CPortMasterDlg 对话框
class CPortMasterDlg : public CDialogEx
{
// 构造
public:
	CPortMasterDlg(CWnd* pParent = nullptr);	// 标准构造函数
	virtual ~CPortMasterDlg();					// 析构函数

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_PORTMASTER_DIALOG };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);	// DDX/DDV 支持

// 实现
protected:
	HICON m_hIcon;

	// 生成的消息映射函数
	virtual BOOL OnInitDialog();
	afx_msg void OnSysCommand(UINT nID, LPARAM lParam);
	afx_msg void OnPaint();
	afx_msg HCURSOR OnQueryDragIcon();
	afx_msg void OnBnClickedConnect();
	afx_msg void OnBnClickedDisconnect();
	afx_msg void OnBnClickedSend();
	afx_msg void OnBnClickedClearInput();
	afx_msg void OnBnClickedClearDisplay();
	afx_msg void OnBnClickedClear();
	afx_msg void OnCbnSelchangePortType();
	afx_msg void OnBnClickedReliableMode();
	afx_msg void OnBnClickedLoadFile();
	afx_msg void OnBnClickedSaveFile();
	afx_msg void OnBnClickedCopy();
	afx_msg void OnBnClickedHexDisplay();
	afx_msg void OnDropFiles(HDROP hDropInfo);
	afx_msg void OnSize(UINT nType, int cx, int cy);		// 响应式布局支持
	afx_msg void OnGetMinMaxInfo(MINMAXINFO* lpMMI);		// 最小窗口尺寸限制
	afx_msg void OnEnChangeInputHex();						// 输入框内容变化事件处理

	DECLARE_MESSAGE_MAP()

private:
	// 控件变量
	CComboBox m_ctrlPortType;
	CComboBox m_ctrlPortList;
	CComboBox m_ctrlBaudRate;
	CComboBox m_ctrlDataBits;
	CComboBox m_ctrlStopBits;
	CComboBox m_ctrlParity;
	CButton m_ctrlConnectBtn;
	CButton m_ctrlDisconnectBtn;
	CButton m_ctrlSendBtn;
	CButton m_ctrlClearInputBtn;
	CButton m_ctrlClearDisplayBtn;
	CButton m_ctrlLoadFileBtn;
	CButton m_ctrlSaveFileBtn;
	CButton m_ctrlCopyBtn;				// 统一的复制按钮（替代HEX和TEXT分别复制）
	CButton m_ctrlReliableMode;
	CButton m_ctrlHexDisplayCheck;		// 十六进制显示复选框
	CEdit m_ctrlInputHex;

	CEdit m_ctrlDataView;			// 统一的数据显示控件（替代HexView和TextView）
	CStatic m_ctrlLog;
	CProgressCtrl m_ctrlProgress;
	CStatic m_ctrlConnectionStatus;
	CStatic m_ctrlProtocolStatus;
	CStatic m_ctrlTransferSpeed;
	CStatic m_ctrlTransferProgress;
	CStatic m_ctrlStatus;
	CStatic m_ctrlDataSourceLabel;		// 数据源显示标签

	// 新增成员变量
	bool m_bHexDisplay;					// 十六进制显示模式标志

	// 状态变量
	bool m_bConnected;
	bool m_bReliableMode;
	
	// 可靠传输
	std::shared_ptr<ITransport> m_transport;
	std::shared_ptr<ReliableChannel> m_reliableChannel;
	
	// 传输状态变量
	bool m_bTransmitting;
	std::vector<uint8_t> m_transmissionData;  // 发送数据缓冲区（文件拖放数据）
	std::vector<uint8_t> m_displayedData;    // 当前显示在hex/text view中的数据（用于保存功能）
	CString m_currentFileName;               // 当前加载的文件名
	size_t m_transmissionProgress;
	UINT_PTR m_transmissionTimer;
	
	// 传输速度统计
	DWORD m_transmissionStartTime;           // 传输开始时间
	size_t m_totalBytesTransmitted;          // 已传输字节数
	DWORD m_lastSpeedUpdateTime;             // 上次速度更新时间
	
	// 初始化函数
	void InitializeControls();
	void InitializeTransportObjects();
	void UpdatePortList();
	void UpdateButtonStates();
	void AppendLog(const CString& message);
	void AppendLogWithDetails(const CString& message, size_t bytes = 0);
	void UpdateTransferSpeed(size_t bytesTransferred);
	void AppendHexData(const BYTE* data, size_t length, bool incoming);
	void AppendTextData(const CString& text, bool incoming);
	
	// 统一输入处理方法
	bool IsHexFormatInput(const CString& input);
	std::vector<uint8_t> ProcessHexInput(const CString& hexInput);
	std::vector<uint8_t> ProcessTextInput(const CString& textInput);
	bool ValidateHexInput(const CString& hexText);
	std::vector<uint8_t> GetInputData();
	void DisplayReceivedData(const std::vector<uint8_t>& data);
	
	// 文件拖放辅助方法
	bool LoadFileForTransmission(const CString& filePath);
	void ShowFileLoadProgress(const CString& filename, size_t totalSize, size_t loaded);
	void ShowFileTransmissionProgress(const CString& filename, size_t totalSize, size_t transmitted);
	
	// 数据传输方法
	void StartDataTransmission(const std::vector<uint8_t>& data);
	void OnTransmissionTimer();
	
	// 窗口管理方法
	void SetFixedWindowSize();
	
	// 数据源状态显示
	void UpdateDataSourceDisplay(const CString& source);
	bool HasValidInputData();
	
	// 数据显示格式控制
	void RefreshDataDisplay();
	void SetDataDisplayFormat(bool hexMode);
	
	// 用户反馈机制
	void ShowUserMessage(const CString& title, const CString& message, UINT type = MB_ICONINFORMATION);
	
	// 响应式布局方法
	void ResizeControls(int cx, int cy);
	void InitializeLayoutConstants();
	CRect CalculateControlRect(int left, int top, int width, int height, int cx, int cy);
	
	// 布局常量
	struct LayoutConstants {
		static const int LEFT_PANEL_WIDTH = 142;
		static const int RIGHT_PANEL_WIDTH = 176; 
		static const int MIN_WINDOW_WIDTH = 780;
		static const int MIN_WINDOW_HEIGHT = 520;
		static const int MARGIN = 8;
		static const int GROUP_SPACING = 8;
	};

	// 应用程序常量
	struct AppConstants {
		// 文件和数据处理常量
		static const size_t BYTES_IN_MEGABYTE = 1024 * 1024;		// 1MB
		static const size_t MAX_FILE_SIZE = BYTES_IN_MEGABYTE;		// 文件大小限制
		static const size_t BYTES_PER_LINE = 8;					// 每行显示字节数
		
		// 定时器常量
		static const UINT TRANSMISSION_TIMER_ID = 1001;			// 传输定时器ID
		static const UINT TRANSMISSION_TIMER_INTERVAL = 100;		// 传输定时器间隔(ms)
		
		// 数据转换常量（使用内联函数避免静态double初始化问题）
		static double GetBytesToMegabytes() { return 1.0 / (1024.0 * 1024.0); }
		static double GetBytesToKilobytes() { return 1.0 / 1024.0; }
	};

public:
	afx_msg void OnTimer(UINT_PTR nIDEvent);
};